<?php
/**
 * Created by NagaRaj.V 
 * Date: 20/Jan/18
 * Time: 19:00 PM
 */
namespace V1\Controller;  

use RestApi\Controller\ApiController;
use Cake\Auth\DefaultPasswordHasher;
use Cake\Utility\Hash;
use Cake\Mailer\Email;

class StoreMobileApiController extends ApiController{

    public function initialize(){
     	parent::initialize(); // TODO: Change the autogenerated stub
        $http = (isset($_SERVER["HTTPS"])) ? 'https://' : 'http://';
        $this->BaseUrl   = $http.$_SERVER['HTTP_HOST'].'/foodlove/';
        $this->loadComponent('Auth');
        $this->loadComponent('Common');
        $this->loadComponent('Googlemap');
        $this->loadComponent('FcmNotification');
        $this->loadComponent('PushNotification');
        $this->loadComponent('IosNotification');
        $this->loadModel('Users');
        $this->loadModel('Drivers');
        $this->loadModel('DriverTrackings');
        $this->loadModel('Orders');
        $this->loadModel('Orderstatuses');
        $this->loadModel('Carts');
        $this->loadModel('Restaurants');
        $this->loadModel('Sitesettings');
        $this->loadModel('StripeCustomers');
        $this->loadModel('WalletHistories');
        $this->loadComponent('Twilio');
        $this->loadModel('Countries');
        // Before Login , these are the function we can access
        $this->Auth->allow([
            'request'
        ]);
    }

    public function index(){
    	$this->httpStatusCode = 200;
        $this->apiResponse['you_response'] = 'Invalid option';        
    }


    public function request() {


        if($this->request->is(['post','put'])) {

            $siteSettings = $this->Sitesettings->find('all', [
                'conditions' => [
                    'id' => '1'
                ]
            ])->hydrate(false)->first();

            define('PUSHER_APPID',$siteSettings['pusher_id']);
            define('PUSHER_SECRET',$siteSettings['pusher_secret']);
            define('PUSHER_AUTHKEY',$siteSettings['pusher_key']);

            if($siteSettings['stripe_mode'] == 'Live') {
                define('STRIPE_SECRET',$siteSettings['stripe_secretkey']);
                define('STRIPE_PUBLISH',$siteSettings['stripe_publishkey']);
            }else {
                define('STRIPE_SECRET',$siteSettings['stripe_secretkeyTest']);
                define('STRIPE_PUBLISH',$siteSettings['stripe_publishkeyTest']);
            }

            define('SMS_TOKEN',$siteSettings['sms_token']);
            define('SMS_SID',$siteSettings['sms_id']);
            define('SMS_FROM',$siteSettings['sms_source_number']);


            $getData = $this->request->getData();

            switch (trim($this->request->getData('action'))) {

                case 'StoreLogin':

                    $restaurant = $this->Auth->identify();
                    if (!empty($restaurant)) {
                        $getRestaurant = $this->Users->find('all', [
                            'conditions' => [
                                'Users.id' => $restaurant['id'],
                                'NOT' => [
                                    'Users.status' => 'Delete'
                                ]
                            ],
                            'contain' => [
                                'Restaurants'
                            ]
                        ])->hydrate(false)->first();

                        if (!empty($getRestaurant['restaurants'][0]['id'])) {

                            $updateRestaurant['id'] = $getRestaurant['restaurants'][0]['id'];
                            $updateRestaurant['device_id'] = $getData['device_id'];
                            $updateRestaurant['is_logged'] = 1;
                            $updateRestaurant['device_name'] = strtolower($getData['device_name']);

                            $restaurantEntity = $this->Restaurants->newEntity($updateRestaurant);
                            $this->Restaurants->save($restaurantEntity);

                            $response['id']      = $getRestaurant['restaurants'][0]['id'];
                            $response['success'] = '1';
                            $response['message'] = 'Login Sucessfully';
                            $response['storename']  = $getRestaurant['restaurants'][0]['restaurant_name'];
                        } else {
                            $response['success'] = '0';
                            $response['message'] = 'Restaurant not available';
                        }
                        
                    } else {
                        $response['success'] = '0';
                        $response['message'] = 'Incorrect username and password';

                    }
                break;

                case 'forgotmail':

                    $userData = $this->Users->find('all', [
                        'conditions' => [
                            'Users.username' => $getData['forgetemail'],
                            // 'Users.status' => 1,
                        ]
                    ])->hydrate(false)->first();

                    if(!empty($userData)) {

                        $tmpPassword  = $this->Common->createTempPassword(7);

                        $updateUser['id'] = $userData['id'];
                        $updateUser['password'] = '123456'; //$tmpPassword;

                        $userEntity = $this->Users->newEntity($updateUser);
                        $this->Users->save($userEntity);

                        $response['success'] = '1';
                        $response['message'] = 'Email has been sent successfully';

                    } else {
                        $response['success'] = '0';
                        $response['message'] = 'You are not authorized';
                    }
                break;

                case 'StoreDetail':

                    $getRestaurant = $this->Restaurants->find('all', [
                        'fields' => [
                            'Restaurants.id',
                            'Restaurants.contact_name',
                            'Restaurants.contact_phone',
                            'Restaurants.contact_email'
                        ],
                        'conditions' => [
                            'Restaurants.id' => $getData['user_id'],
                        ],
                    ])->hydrate(false)->first();

                    if(!empty($getRestaurant)){
                        $response['id']          = $getRestaurant['id'];
                        $response['name']        = $getRestaurant['contact_name'] ;
                        $response['email']       = $getRestaurant['contact_email'];
                        $response['phone']       = $getRestaurant['contact_phone']; 
                        $response['success'] = '1';

                    } else {
                        $response['success'] = '0';
                        $response['message'] = 'Unauthorized access';
                    }
                break;

                case 'EditStoreDetail':

                    if (!empty($getData['user_id'])) {

                        $updateRestaurant['id'] = $getData['user_id'];
                        $updateRestaurant['contact_name'] = $getData['name'];
                        $updateRestaurant['contact_email'] = $getData['email'];
                        $updateRestaurant['contact_phone'] = $getData['phone'];

                        $restaurantEntity = $this->Restaurants->newEntity($updateRestaurant);
                        $this->Restaurants->save($restaurantEntity);

                        $response['success'] = '1';
                        $response['message'] = 'Profile Updated successfully';

                    } else {
                        $response['success'] = '0';
                        $response['message'] = 'Unauthorized access';
                    }
                break;

                case 'pendingList':
                    $storeId    = $getData['user_id'];
                    $currentDate = date('Y-m-d');

                    $siteSettings = $this->Sitesettings->find('all', [
                        'conditions' => [
                            'id' => '1'
                        ]
                    ])->hydrate(false)->first();

                    if ($storeId != '') {

                        $getOrders = $this->Orders->find('all', [
                            'fields' => [
                                'Orders.id',
                                'Orders.order_number',
                                'Orders.customer_name',
                                'Orders.customer_phone',
                                'Orders.created',
                                'Orders.order_type',
                                'Orders.delivery_time',
                                'Orders.order_grand_total',
                                'Orders.payment_method',
                                'Orders.payment_status',
                                'Orders.assoonas'
                            ],
                            'conditions' => [
                                'Orders.restaurant_id' => $storeId,
                                'Orders.status' => 'Pending',
                                // 'Orders.created LIKE' => $currentDate.'%'
                            ],
                            'order' => [
                                'Orders.id DESC'
                            ]
                        ])->hydrate(false)->toArray();


                        if (!empty($getOrders)) {
                            foreach ($getOrders as $key => $value) {
                                $orderList[$key]['id']            = $value['id'];                          
                                $orderList[$key]['orderId']       = $value['order_number'];
                                $orderList[$key]['name']          = $value['customer_name'];
                                $orderList[$key]['date']          = date('Y-m-d', strtotime($value['created']));
                                $orderList[$key]['orderType']     = $value['order_type'];
                                $orderList[$key]['phonenumber']   = $value['customer_phone'];
                                $orderList[$key]['deliverytime']  = $value['delivery_time'];
                                $orderList[$key]['totalAmount']   = $value['order_grand_total'];
                                $orderList[$key]['paymentMethod'] = $value['payment_method'];
                                $orderList[$key]['paymentType']   = $value['payment_status'];
                                $orderList[$key]['assoonas']   = $value['assoonas'];
                            }

                            $response['pendinglist'] = $orderList;
                            $response['currency'] = $siteSettings['site_currency'];
                            $response['success'] = '1';
                            $response['message'] = 'Successfully';
                        } else {
                            $response['success'] = '0';
                            $response['currency'] = $siteSettings['site_currency'];
                            $response['message'] = 'No Record Found';
                        }
                        
                    } else {
                        $response['success'] = '0';
                        $response['message'] = 'No Record Found';
                    }
                break;

                case 'acceptList':
                    $storeId    = $getData['user_id'];
                    $status = array('Delivered','Pending','Failed');
                    $currentDate = date('Y-m-d');
                    
                    if ($storeId != '') {

                        $getOrders = $this->Orders->find('all', [
                            'fields' => [
                                'Orders.id',
                                'Orders.status',
                                'Orders.order_number',
                                'Orders.customer_name',
                                'Orders.customer_phone',
                                'Orders.created',
                                'Orders.order_type',
                                'Orders.delivery_time',
                                'Orders.order_grand_total',
                                'Orders.payment_method',
                                'Orders.payment_status',
                                'Orders.source_latitude',
                                'Orders.source_longitude',
                                'Orders.destination_latitude',
                                'Orders.destination_longitude',
                                'Orders.assoonas',
                                'Drivers.id',
                                'Drivers.driver_name',
                            ],
                            'conditions' => [
                                'Orders.restaurant_id' => $storeId,
                                // 'Orders.created LIKE' => $currentDate.'%',
                                'OR' => [
                                    ['Orders.status' => 'Accepted'],
                                    ['Orders.status' => 'Waiting'],
                                    ['Orders.status' => 'Driver Accepted'],
                                    ['Orders.status' => 'Collected'],
                                ]
                            ],
                            'contain' => [
                                'Drivers'
                            ],
                            'order' => [
                                'Orders.id DESC'
                            ]
                        ])->hydrate(false)->toArray();

                        if (!empty($getOrders)) {
                            foreach ($getOrders as $key => $value) {

                                $orderList[$key]['id']  = $value['id'];
                                $orderList[$key]['name']    = $value['customer_name'];
                                $orderList[$key]['date']    = date('Y-m-d', strtotime($value['created']));                        
                                $orderList[$key]['phone']   = $value['customer_phone'];
                                $orderList[$key]['status']  = $value['status'];
                                $orderList[$key]['orderId'] = $value['order_number'];
                                $orderList[$key]['username']    = $value['customer_name'];
                                $orderList[$key]['storeLat']    = $value['source_latitude'];
                                $orderList[$key]['storeLong']   = $value['source_longitude'];
                                $orderList[$key]['orderType']   = $value['order_type'];
                                $orderList[$key]['phonenumber'] = $value['customer_phone'];
                                $orderList[$key]['paymentType'] = $value['payment_status'];
                                $orderList[$key]['totalAmount'] = $value['order_grand_total'];
                                $orderList[$key]['customerLat'] = $value['destination_latitude'];
                                $orderList[$key]['customerLong'] = $value['destination_longitude'];
                                $orderList[$key]['deliverytime']    = $value['delivery_time'];
                                $orderList[$key]['paymentMethod']   = $value['payment_method'];
                                $orderList[$key]['assoonas']   = $value['assoonas'];
                                $orderList[$key]['deriverId']   = ($value['driver']['id']) ? $value['driver']['id'] : '' ;
                                $orderList[$key]['deriverName']  = !empty($value['driver']['driver_name']) ? 
                                                                    $value['driver']['driver_name'] : ''; 
                            }

                            $response['acceptList'] = $orderList;
                            $response['success'] = '1';
                            $response['message'] = 'Successfully';
                        } else {
                            $response['success'] = '0';
                            $response['message'] = 'No Record Found';
                        }
                        
                    } else {
                        $response['success'] = '0';
                        $response['message'] = 'No Record Found';
                    }
                break;

                case 'deliverList':
                    $storeId    = $getData['user_id'];
                    $currentDate = date('Y-m-d');

                    if ($storeId != '') {

                        $pickupOrders = $this->Orders->find('all', [
                            'conditions' => [
                                'Orders.restaurant_id' => $storeId,
                                'Orders.status' => 'Delivered',
                                'Orders.order_type' => 'pickup'
                            ],
                        ])->hydrate(false)->count();

                        $deliveryOrders = $this->Orders->find('all', [
                            'conditions' => [
                                'Orders.restaurant_id' => $storeId,
                                'Orders.status' => 'Delivered',
                                'Orders.order_type' => 'delivery'
                            ],
                        ])->hydrate(false)->count();

                        $OrderRecords = $this->Orders->find('all', [
                            'fields' => [
                                'Subtotl' => "SUM(Orders.order_grand_total)"
                            ],
                            'conditions' => [
                                'Orders.restaurant_id' => $storeId,
                                'Orders.status' => 'Delivered',
                            ],
                        ])->hydrate(false)->first();

                        $getOrders = $this->Orders->find('all', [
                            'fields' => [
                                'Orders.id',
                                'Orders.order_number',
                                'Orders.customer_name',
                                'Orders.customer_phone',
                                'Orders.created',
                                'Orders.delivery_date',
                                'Orders.status',
                                'Orders.order_type',
                                'Orders.delivery_time',
                                'Orders.order_grand_total',
                                'Orders.payment_method',
                                'Orders.payment_status',
                                'Orders.assoonas'
                            ],
                            'conditions' => [
                                'Orders.restaurant_id' => $storeId,
                                'Orders.status' => 'Delivered',
                                // 'Orders.created LIKE' => $currentDate.'%'
                            ],
                            'contain' => [
                                'Drivers' => [
                                    'fields' => [
                                        'Drivers.id',
                                        'Drivers.driver_name',
                                    ]
                                ]
                            ],
                            'order' => [
                                'Orders.id DESC'
                            ]
                        ])->hydrate(false)->toArray();

                        if (!empty($getOrders)) {
                            foreach ($getOrders as $key => $value) {
                                $orderList[$key]['id']            = $value['id'];  
                                $orderList[$key]['date']          = date('Y-m-d', strtotime($value['created']));
                                $orderList[$key]['date']      = $value['delivery_date'];
                                $orderList[$key]['phone']     = $value['customer_phone'];
                                $orderList[$key]['status']    = $value['status'];
                                $orderList[$key]['orderId']     = $value['order_number'];
                                $orderList[$key]['username']    = $value['customer_name'];
                                $orderList[$key]['orderType']   = $value['order_type'];
                                $orderList[$key]['paymentType'] = $value['payment_status'];
                                $orderList[$key]['totalAmount'] = $value['order_grand_total'];
                                $orderList[$key]['deliverytime']  = $value['delivery_time'];
                                $orderList[$key]['paymentMethod']   = $value['payment_method'];
                                $orderList[$key]['assoonas']   = $value['assoonas'];

                                $orderList[$key]['deriverId']     = ($value['driver']['id']) ? $value['driver']['id'] : '' ;
                                $orderList[$key]['driverName']   = !empty($value['driver']['driver_name']) ? 
                                                                    $value['driver']['driver_name'] : '';
                            }

                            $response['pickupOrders']    = $pickupOrders;
                            $response['deliveryOrders']  = $deliveryOrders;
                            $response['totalSales']      = $OrderRecords['Subtotl'];

                            $response['acceptList'] = $orderList;
                            $response['success'] = '1';
                            $response['message'] = 'Successfully';
                        } else {
                            $response['success'] = '0';
                            $response['message'] = 'No Record Found';
                        }
                        
                    } else {
                        $response['success'] = '0';
                        $response['message'] = 'No Record Found';
                    }
                break;

                case 'orderStatusChange':

                    $orderId = $this->request->getData('id');
                    $getOrder = $this->Orders->find('all', [
                        /*'fields' => [
                            'Orders.id',
                        ],*/
                        'conditions' => [
                            'Orders.id' => $getData['order_id'],
                        ],
                        'contain' => [
                            'Users',
                            'Drivers',
                            'Restaurants'
                        ]
                    ])->hydrate(false)->first();

                    $siteCountry = $this->Countries->find('all', [
                        'conditions' => [
                            'id' => $siteSettings['site_country']
                        ]
                    ])->hydrate(false)->first();

                    $countryCode = $siteCountry['phone_code'];

                    //pr($getOrder);die();

                    if (!empty($getOrder)) {

                        if(strtolower($getData['status']) == 'accept') {

                            $updateOrder['id']  = $getData['order_id'];  
                            $updateOrder['status']  = 'Accepted';


                            if($siteSettings['sms_option'] == 'Yes') {

                                $deliveryDate = date('Y-m-d',strtotime($getOrder['delivery_date']));

                                $customerMessage = 'Congratulations! Your order '.
                                    $getOrder['order_number'].' succesfully accepted by '.
                                    $getOrder['restaurant']['restaurant_name'].'. Your order will be delivered by '.
                                    $deliveryDate. ' at '.
                                    $getOrder['delivery_time'].'. Thanks '.
                                    $siteSettings['site_name'];

                                $toCustomerNumber = '+'.$countryCode.$getOrder['customer_phone'];
                                $customerSms      = $this->Twilio->sendMessage($toCustomerNumber, $customerMessage);
                            }

                            $this->orderEmail($getData['order_id']);



                        } elseif($getData['status'] == 'Delivered') {

                            $updateOrder['id']    = $getData['order_id'];
                            $updateOrder['status']  = 'Delivered';
                            $updateOrder['completed_time']  = date("Y-m-d H:i:s");
                            $updateOrder['payment_status']  = 'P';

                            //Reward Points

                            $this->loadModel('Rewards');
                            $this->loadModel('CustomerPoints');

                            $rewardPoints = $this->Rewards->find('all', [
                                'conditions' => [
                                    'id' => '1'
                                ]
                            ])->hydrate(false)->first();

                            $getRestaurantOption = $this->Restaurants->find('all', [
                                'fields' => [
                                    'reward_option'
                                ],
                                'conditions' => [
                                    'id' => $getOrder['restaurant']['id'],
                                ]
                            ])->hydrate(false)->first();

                            if(!empty($rewardPoints) && $getRestaurantOption['reward_option'] == 'Yes') {
                                $grandTotal = $getOrder['order_grand_total'];
                                $rewardAmount = $rewardPoints['reward_amount'];
                                $rewardPoints = $rewardPoints['reward_point'];

                                $getRewardFromTotal = $grandTotal/$rewardAmount;

                                $orderPoint = $getRewardFromTotal * $rewardPoints;

                                $customerPoint['order_id'] = $getOrder['id'];
                                $customerPoint['restaurant_name'] = $getOrder['restaurant']['restaurant_name'];
                                $customerPoint['customer_id'] = $getOrder['customer_id'];
                                $customerPoint['total'] = $grandTotal;
                                $customerPoint['points'] = $orderPoint;
                                $customerPoint['type'] = 'Earned';

                                $customerPointEntity = $this->CustomerPoints->newEntity();
                                $customerPointPatch = $this->CustomerPoints->patchEntity($customerPointEntity,$customerPoint);
                                $customerPointSave = $this->CustomerPoints->save($customerPointPatch);
                            }

                        } else {

                            $updateOrder['id']      = $getData['order_id'];  
                            $updateOrder['status']  = 'Failed';
                            $updateOrder['failed_reason']  = $getData['cancel_reason'];
                        }

                        //SMS FOR Failed and Delivered to Customer

                        if(strtolower($getData['status']) == 'failed' || strtolower($getData['status']) == 'delivered') {

                            if(strtolower($getData['status']) == 'failed') {

                                //Amount revert to Customer
                                if($getOrder['payment_method'] == 'Wallet' || $getOrder['payment_wallet'] == 'Yes') {
                                    if($getOrder['paid_full'] == 'Yes') {
                                        $addedAmount = $getOrder['order_grand_total'];
                                    }else {
                                        $addedAmount = $getOrder['wallet_amount'];
                                    }

                                    $walletAmount = $userDetails['wallet_amount'] + $addedAmount;

                                    //Update Wallet Amount
                                    $custEntity = $this->Users->newEntity();
                                    $amount['wallet_amount'] = $walletAmount;
                                    $custPatch = $this->Users->patchEntity($custEntity,$amount);
                                    $custPatch->id = $userDetails['id'];
                                    $saveCust = $this->Users->save($custPatch);


                                    //Add Wallet History
                                    $walletEntity = $this->WalletHistories->newEntity();
                                    $history['customer_id'] = $userDetails['id'];
                                    $history['purpose'] = "Amount Refund for order ".$getOrder['order_number'];
                                    $history['transaction_type'] = 'Credited';
                                    $history['transaction_details'] = $getOrder['order_number'];
                                    $history['amount'] = $addedAmount;
                                    $walletPatch = $this->WalletHistories->patchEntity($walletEntity,$history);
                                    $saveWallet = $this->WalletHistories->save($walletPatch);
                                }


                                //SMS TO customer
                                $customerMessage = 'Your order ' . $getOrder['order_number'].' was failed due to '.$getData['cancel_reason'].'.';
                            }else {
                                //SMS TO customer
                                $customerMessage = 'Your order ' . $getOrder['order_number'].' was delivered successful';
                            }

                            if($siteSettings['sms_option'] == 'Yes') {
                                $toCustomerNumber = '+'.$countryCode.$getOrder['customer_phone'];
                                $customerSms      = $this->Twilio->sendMessage($toCustomerNumber, $customerMessage);
                            }
                        }

                        $orderEntity = $this->Orders->newEntity($updateOrder);
                        $this->Orders->save($orderEntity);

                        $this->PushNotification->trackingNotification();
                        //Customer Notification
                        if (strtolower($this->request->getData('status')) == 'failed') {
                            $customerMessage = 'Your order ' . $getOrder['order_number'].' was failed due to '.$getData['cancel_reason'].'.';
                        } elseif ($this->request->getData('status') == 'Delivered') {
                            $customerMessage = 'Your order delivered ' . $getOrder['order_number'];
                        } else {
                            $customerMessage = 'Your order accepted ' . $getOrder['order_number'];
                        }
                        if(!empty($getOrder) && $getOrder['user']['device_id'] != '') {

                            $notificationdata['data']['title']          = "orderstatus";
                            $notificationdata['data']['message']        = $customerMessage;
                            $notificationdata['data']['is_background']  = false;
                            $notificationdata['data']['payload']        = array('OrderDetails' => "",'type'    => "orderstatus");
                            $notificationdata['data']['timestamp']      = date('Y-m-d G:i:s');
                            $gcm = (trim($getOrder['user']['device_type']) == 'Android') ?
                                $this->FcmNotification->sendNotification($notificationdata, $getOrder['user']['device_id']) :
                                $this->IosNotification->notificationIOS($customerMessage, $getOrder['user']['device_id'], 'Customer');
                        }
                        $this->PushNotification->customerNotification($getOrder['customer_id'],$getOrder['restaurant_id'],$customerMessage);

                        $response['success'] = '1';
                        $response['message'] = 'Status has been Changed';
                    } else {
                        $response['success'] = '0';
                        $response['message'] = 'Unauthorized';
                    }
                break;

                case 'assignOrder':

                    $orders = $this->Orders->find('all', [
                        'conditions' => [
                            'Orders.id' => $getData['order_id'],
                        ],
                        'contain' => [
                            'Restaurants'
                        ]
                    ])->hydrate(false)->first();

                    $driverDetails = $this->Drivers->find('all', [
                        'conditions' => [
                            'Drivers.id' => $getData['driver_id'],
                        ],
                    ])->hydrate(false)->first();

                    if (!empty($orders) && !empty($driverDetails)) {

                        $storeAddress = '';

                        $orderDetails['paymentType']            = $orders['payment_status'];
                        $orderDetails['CustomerName']           = $orders['customer_name'];

                        $orderDetails['StoreName']              = stripslashes($orders['restaurant']['restaurant_name']);
                        $orderDetails['SourceAddress']          = $storeAddress;
                        $orderDetails['SourceLatitude']         = $orders['source_latitude'];
                        $orderDetails['SourceLongitude']        = $orders['source_longitude'];
                        $orderDetails['DestinationAddress']     =
                            ($this->siteSetting['Sitesetting']['address_mode'] != 'Google') ?
                                $orders['address'].', '.
                                $orders['location_name'].', '.
                                $orders['city_name'].', '.
                                $orders['state_name'] : $orders['google_address'];

                        $orderDetails['LandMark']               = $orders['landmark'];
                        $orderDetails['DestinationLatitude']    = $orders['destination_latitude'];
                        $orderDetails['DestinationLongitude']   = $orders['destination_longitude'];
                        $orderDetails['OrderDate']              = $orders['delivery_date'];
                        $orderDetails['OrderTime']              = $orders['delivery_time_slot'];
                        $orderDetails['OrderPrice']             = $orders['order_grand_total'];
                        $orderDetails['OrderId']                = $orders['id'];
                        $orderDetails['OrderGenerateId']        = $orders['order_number'];
                        
                        $distance                               = $this->Googlemap->getDrivingDistance(
                                                                    $orderDetails['SourceLatitude'],
                                                                    $orderDetails['SourceLongitude'],
                                                                    $orderDetails['DestinationLatitude'],
                                                                    $orderDetails['DestinationLongitude']);
                        $orderDetails['Distance']               = $distance['distanceText'];


                        // pr($orderDetails);
                        // exit();

                        $count = $this->Orders->find('all', [
                            'conditions' => [
                                'Orders.driver_id' => $getData['driver_id'],
                                'Orders.status' => 'Waiting',
                            ],
                        ])->hydrate(false)->count();

                                    
                        $orderDetails['waitingCount'] = $count + 1;

                        $deviceId                                   = $driverDetails['device_id'];
                        $message        = 'New order came - '.$orders['order_number'];
                        $notificationdata['data']['title']          = "assignorder";
                        $notificationdata['data']['message']        = 'New order came - '.$orders['order_number'];
                        $notificationdata['data']['is_background']  = false;
                        $notificationdata['data']['payload']        = array('OrderDetails' => $orderDetails,'type'    => "assignorder");
                        $notificationdata['data']['timestamp']      = date('Y-m-d G:i:s');

                        //$gcm = $this->FcmNotification->sendNotification($notificationdata,$deviceId);

                        $gcm    = (trim($driverDetails['device_name']) == 'ANDROID') ?
                            $this->FcmNotification->sendNotification($notificationdata, $deviceId) :
                            $this->IosNotification->notificationIOS($message, $deviceId, 'Driver', 'Driver', $orderDetails);



                        $orderStatus['id']          = $getData['order_id'];
                        $orderStatus['status']      = 'Waiting';
                        $orderStatus['driver_id']   = $getData['driver_id'];

                        $ordertEntity = $this->Orders->newEntity($orderStatus);
                        $this->Orders->save($ordertEntity);

                        $response['success'] = '1';
                        $response['message'] = 'order has been assigned';
                    } else {
                        $response['success'] = '0';
                    }
                break;

                case 'orderView':

                    $getOrder = $this->Orders->find('all', [
                        'conditions' => [
                            'Orders.id' => $getData['order_id'],
                        ],
                        'contain' => [
                            'Carts'
                        ]
                    ])->hydrate(false)->first();

                    $orderInfo  = [];
                    if (!empty($getOrder)) {

                      $distance = $this->Googlemap->getDrivingDistance(
                            $getOrder['source_latitude'], $getOrder['source_longitude'],
                            $getOrder['destination_latitude'], $getOrder['destination_longitude']);

                        foreach($getOrder['carts'] as $key => $value) {
                            $order[$key]['productname'] = $value['menu_name'];
                            $order[$key]['quantity'] = $value['quantity'];
                            $order[$key]['total'] = $value['total_price'];
                            $order[$key]['product_descrption'] = $value['menu_description'];
                            $order[$key]['subaddons_name'] = $value['subaddons_name']; 
                        }
                        $orderInfo['tax']            = $getOrder['tax_amount'];
                        $orderInfo['sub_tot']        = $getOrder['order_sub_total'];
                        $orderInfo['delivery']       = $getOrder['delivery_charge'];
                        $orderInfo['grand_tot']      = $getOrder['order_grand_total'];
                        $orderInfo['name']           = $getOrder['order_grand_total'];
                        $orderInfo['id']             = $getOrder['id'];
                        $orderInfo['assoonas']       = $getOrder['assoonas'];
                        $orderInfo['ref_number']     = $getOrder['order_number'];
                        $orderInfo['paymentStatus']  = $getOrder['payment_method'];
                        $orderInfo['orderType']      = $getOrder['order_type'];
                        $orderInfo['phone']          = $getOrder['customer_phone'];
                        $orderInfo['name']           = $getOrder['customer_name'];
                        $orderInfo['mail']           = $getOrder['customer_email'];
                        $orderInfo['address']        = $getOrder['address'];
                        $orderInfo['orderdescrption']   = $getOrder['order_description'];
                        $orderInfo['DeliveryDate']      = $getOrder['delivery_date'];
                        $orderInfo['DeliveryTime']      = $getOrder['delivery_time'];
                        $orderInfo['Distancevalue']     = $distance['distanceText'];
                        $orderInfo['payment_type']      = $getOrder['payment_status'];
                        $orderInfo['offer']             = $getOrder['offer_amount'];
                        $orderInfo['offerPercentage']   = $getOrder['offer_percentage'];
                        $orderInfo['taxPercentage']     = $getOrder['tax_percentage'];
                        $orderInfo['voucherPercentage'] = $getOrder['voucher_percentage'];
                        $orderInfo['voucherAmount']     = $getOrder['voucher_amount'];
                        $orderInfo['tipAmount']         = $getOrder['tip_amount'];
                        $orderInfo['rewardOffer']         = $getOrder['reward_offer'];
                        $orderInfo['rewardOfferPercentage'] = $getOrder['reward_offer_percentage'];
                        $orderInfo['doorNo']         = '';
                       
                       $orderInfo['productdetail'] = $order;
                       $response['success'] = '1';
                       $response['orderdetail'][] = $orderInfo;

                    } else {
                        $response['success'] = '0';
                        $response['message'] = 'No Records Found';
                    }
                break;

                case 'completedOrderFillter':

                    $range = array('ThisWeek','ThisMonth','ThisYear','Today', 'Yesterday');
                    $this->set('range',$range);
                    $currentDate = date("Y-m-d 23:59:59");
                    $ts = strtotime($currentDate);
                    $start = (date('w', $ts) == 0) ? $ts : strtotime('last sunday', $ts);
                    $start_date = date('Y-m-d', $start);
                    $end_date = date('Y-m-d', strtotime('next saturday', $start));
                    $Today= date("Y-m-d");
                    $yesterdayDate = date("Y-m-d",  strtotime("-1 days"));
                    $thismonth        = date('Y-m-d 00:00:01', strtotime("first day of this month"));
                    $lastmonth_start = date('Y-m-d 00:00:01', strtotime("-1 months first day of this month"));
                    $lastmonth_end    = date('Y-m-d 23:59:59', strtotime("-1 months last day of this month"));
                    $thisyear = date('Y')."-01-01 00:00:01";
                    $lastyear = date('Y', strtotime("-1 year"));
                    $lastyearStart=$lastyear."-01-01 00:00:01";
                    $lastyearEnd=$lastyear."-12-31 23:59:59";

                    $resId = $getData['user_id'];
                    $to_date = (!empty($getData['to'])) ? date('Y-m-d', strtotime($getData['to'])) : 0;
                    $from_date = (!empty($getData['to'])) ? date('Y-m-d', strtotime($getData['from'])) : 0;

                    $storeId    = $getData['user_id'];

                    $first_day_this_month = date('m-01-Y');
                    $last_day_this_month  = date('m-t-Y');

                    if (!empty($getData['sortby'])) {

                        if($getData['sortby'] == $range[0]) {

                            $orderList = $this->Orders->find('all', [
                                'conditions' => [
                                    'Orders.status' => 'Delivered',
                                    'Orders.restaurant_id' => $storeId,
                                    'AND' => [
                                        ['Orders.delivery_date >=' => $start_date],
                                        ['Orders.delivery_date <=' => $currentDate],
                                    ]
                                ],
                                'order' => [
                                    'Orders.id DESC'
                                ]
                            ])->hydrate(false)->toArray();

                        } else if ($getData['sortby'] == $range[1]) {

                            $orderList = $this->Orders->find('all', [
                                'conditions' => [
                                    'Orders.status' => 'Delivered',
                                    'Orders.restaurant_id' => $storeId,
                                    'AND' => [
                                        ['Orders.delivery_date >=' => $thismonth],
                                        ['Orders.delivery_date <=' => $currentDate],
                                    ]
                                ],
                                'order' => [
                                    'Orders.id DESC'
                                ]
                            ])->hydrate(false)->toArray();

                        } else if($getData['sortby'] == $range[2]){

                            $orderList = $this->Orders->find('all', [
                                'conditions' => [
                                    'Orders.status' => 'Delivered',
                                    'Orders.restaurant_id' => $storeId,
                                    'AND' => [
                                        ['Orders.delivery_date >=' => $thisyear],
                                        ['Orders.delivery_date <=' => $currentDate],
                                    ]
                                ],
                                'order' => [
                                    'Orders.id DESC'
                                ]
                            ])->hydrate(false)->toArray();

                        } else if($getData['sortby'] == $range[3]) {

                            $orderList = $this->Orders->find('all', [
                                'conditions' => [
                                    'Orders.status' => 'Delivered',
                                    'Orders.restaurant_id' => $storeId,
                                    'Orders.delivery_date' => date('Y-m-d', time())
                                ],
                                'order' => [
                                    'Orders.id DESC'
                                ]
                            ])->hydrate(false)->toArray();

                        } else if($getData['sortby'] == $range[4]) {

                            $orderList = $this->Orders->find('all', [
                                'conditions' => [
                                    'Orders.status' => 'Delivered',
                                    'Orders.restaurant_id' => $storeId,
                                    'Orders.delivery_date' => $yesterdayDate
                                ],
                                'order' => [
                                    'Orders.id DESC'
                                ]
                            ])->hydrate(false)->toArray();

                        }
                    } else {
                        $orderList = $this->Orders->find('all', [
                            'conditions' => [
                                'Orders.status' => 'Delivered',
                                'Orders.restaurant_id' => $storeId,
                                'AND' => [
                                    ['Orders.delivery_date >=' => $from_date],
                                    ['Orders.delivery_date <=' => $to_date],
                                ]
                            ],
                            'order' => [
                                'Orders.id DESC'
                            ]
                        ])->hydrate(false)->toArray();

                    }

                    if (!empty($orderList)) {

                        foreach ($orderList as $key => $value) {
                            $orderListData[$key]['id']  = $value['id'];
                            $orderListData[$key]['total']   = $value['order_grand_total'];
                            $orderListData[$key]['order_id']    = $value['order_number'];
                            $orderListData[$key]['orderType']   = $value['order_type'];
                            $orderListData[$key]['paymentType'] = $value['payment_status'];
                            $orderListData[$key]['delivered_date']  = $value['delivery_date'];
                        }                                    
                        $response['orderDetail'] = $orderListData;
                        $response['success'] = '1';
                    } else {
                        $response['success'] = '0';
                        $response['message'] = 'No Record Found';
                    }

                break;

                case 'availableDriver':

                    $orderDetails = $this->Orders->find('all', [
                        'conditions' => [
                            'Orders.id' => $getData['order_id'],
                        ],
                    ])->hydrate(false)->first();

                    $restId = $this->Restaurants->find('all', [
                        'conditions' => [
                            'id' => $getData['store_id']
                        ]
                    ])->hydrate(false)->first();

                    if ($orderDetails['driver_id']) {
                        $response['success'] = '0';
                        $response['message'] = 'Order already register';
                    } else {

                        $drivers = $this->Drivers->find('all', [
                            'conditions' => [
                                'Drivers.driver_status' => 'Available',
                                'Drivers.created_id' => $restId['user_id'],
                            ],
                            'group' => [
                                'Drivers.id'
                            ],
                            'contain' => [
                                'DriverTrackings'
                            ]
                        ])->hydrate(false)->toArray();

                        //pr($drivers);die();

                        $pickup['Latitude']  = $orderDetails['source_latitude'];
                        $pickup['Longitude'] = $orderDetails['source_longitude'];                        
                        if (!empty($drivers)) {
                            
                            foreach ($drivers as $key => $value) {
                                $distance = $this->Googlemap->getDrivingDistance(
                                                            $value['driver_tracking']['driver_latitude'],
                                                            $value['driver_tracking']['driver_longitude'],
                                                            $pickup['Latitude'],
                                                            $pickup['Longitude']);
                                //if (!empty($distance)) {

                                    $availDrivers[$key]['id']             = $value['id'];
                                    $availDrivers[$key]['status']         = $value['driver_status'];
                                    $availDrivers[$key]['distance']       = (!empty($distance)) ? 
                                                                            $distance['distanceText'] : 'Out of range';
                                    $availDrivers[$key]['reachtime']      = (!empty($distance)) ? 
                                                                            $distance['durationText'] : 'Out of range';
                                    $availDrivers[$key]['driver_name']    = $value['driver_name'];
                                    $availDrivers[$key]['driver_phone']   = $value['phone_number'];
                                    $availDrivers[$key]['vehicle_name']   = $value['vechile_name'];

                                //}
                                
                            }

                            $distance = array();
                            foreach ($availDrivers as $key => $row) {
                                $distance[$key] = $row['distance'];
                            }
                            array_multisort($distance, SORT_ASC, $availDrivers);
                            
                            $response['driverDetail'] = ($availDrivers) ? $availDrivers : array();
                            $response['success'] = '1';

                        } else {
                            $response['success'] = '0';
                            $response['message'] = 'No Records Found';
                        }                       
                    }               
                break;

                case 'StoreLogout':

                    $getRestaurant = $this->Restaurants->find('all', [
                        'fields' => [
                            'Restaurants.id'
                        ],
                        'conditions' => [
                            'Restaurants.id' => $getData['user_id'],
                        ],
                    ])->hydrate(false)->first();

                    if (!empty($getRestaurant)) {

                        $updateRestaurant['id'] = $getData['user_id'];
                        $updateRestaurant['is_logged'] = 0;
                        $updateRestaurant['device_id'] = '';

                        $restaurantEntity = $this->Restaurants->newEntity($updateRestaurant);
                        $this->Restaurants->save($restaurantEntity);

                        $response['success'] = '1';
                        $response['message'] = 'logout Successfully';

                    } else {
                        $response['success'] = '0';
                        $response['message'] = 'Try Again..!';
                    }
                break;

                case 'changePassword':

                    $getRestaurant = $this->Restaurants->find('all', [
                        'fields' => [
                            'Restaurants.id',
                            'Restaurants.user_id'
                        ],
                        'contain' => [
                            'Users' => [
                                'fields' => [
                                    'Users.id',
                                    'Users.username',
                                    'Users.password',
                                ]
                            ]
                        ],
                        'conditions' => [
                            'Restaurants.id' => $getData['userid'],
                        ],
                    ])->hydrate(false)->first();



                    if (!empty($getRestaurant)) {

                        $getData['username'] = $getRestaurant['user']['username'];
                        $getData['password'] = $getData['oldpassword'];



                         if((new DefaultPasswordHasher())->check($getData['oldpassword'], $getRestaurant['user']['password'])) {

                            $updateRestaurant['id'] = $getRestaurant['user_id'];
                            $updateRestaurant['password'] = $getData['newpassword'];

                            $restaurantEntity = $this->Users->newEntity($updateRestaurant);
                            $this->Users->save($restaurantEntity);

                            $response['success'] = '1';
                            $response['message'] = 'Changed password successfully';

                        } else {
                            $response['success'] = '0';
                            $response['message'] = 'Old password not matched';
                        }
                    } else {
                        $response['success'] = '0';
                        $response['message'] = 'Try Again..!';
                    }
                break;
            }
        } else {
            $response['success'] = '0';
            $response['message'] = 'Unauthorized access';
        }
        die(json_encode($response));
    }

    public function orderEmail($orderId) {

        $this->siteSettings = $this->Sitesettings->find('all', [
            'conditions' => [
                'id' => '1'
            ]
        ])->hydrate(false)->first();

        $orderDetails = $this->Orders->find('all', [
            'conditions' => [
                'Orders.id' => $orderId
            ],
            'contain' => [
                'Carts',
                'Restaurants'
            ]
        ])->hydrate(false)->first();
        $offerDetails = '';
        $voucherDetails = '';
        $rewardDetails = '';
        $orderDescription = '';

        if($orderDetails['split_payment'] == 'Yes') {
            $paymentMethod = strtoupper(($orderDetails['payment_method'] == 'stripe') ? 'Card' : $orderDetails['payment_method']).' & '.'Wallet';
        }else {
            $paymentMethod = strtoupper(($orderDetails['payment_method'] == 'stripe') ? 'Card' : $orderDetails['payment_method']);

        }

        $paymentStatus = ($orderDetails['payment_status'] == 'P') ? 'Paid' : 'Not Paid';

        if($orderDetails['order_type'] == 'delivery') {
            $deliveryAmount = ($orderDetails['delivery_charge'] > 0) ? $this->siteSettings['site_currency'].' '. number_format($orderDetails['delivery_charge'],2) : 'Free';

            $deliveryCharge = '<tr>
                              <td align="left" style="">
                                 <table cellspacing="0" cellpadding="0" border="0" width="100%">
                                    <tr>
                                       <td width="75%" align="right" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 15px; font-weight: 600;padding: 10px;border-top: 1px solid #eeeeee;">
                                          Delivery Fee
                                       </td>
                                       <td width="25%" align="right" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 15px; font-weight: 600; line-height: 24px; padding: 10px;border-top: 1px solid #eeeeee;">
                                          '.$deliveryAmount.'
                                       </td>
                                    </tr>
                                 </table>
                              </td>
                           </tr>';

            $deliveryAddress = '<tr>
                     <td align="center" height="100%" valign="top" width="100%" style="padding:0px 20px 20px 20px;background-color:#fff">
                        <table align="center" border="0" cellpadding="0" cellspacing="0" width="100%" style="width:670px;padding:10px;">
                           <tr>
                              <td align="left" valign="top" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 16px; font-weight: 400; line-height: 24px; padding-top:15px">
                                 <span style="font-weight: 700;">Delivery Address</span>
                                 <span style="padding-top:0px;display:block">'.$orderDetails['customer_name'].'<br>'.$orderDetails['flat_no'].', '.$orderDetails['address'].'<br>'.$orderDetails['customer_phone'].'</span>
                              </td>
                              <td align="right" valign="top" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 16px; font-weight: 400; line-height: 24px; padding-top:15px">
                                 <span style="font-weight: 700;">Delivery Time / Date</span>
                                 <span style="padding-top:0px;display:block">'.date('Y-m-d',strtotime($orderDetails['delivery_date'])).' '.$orderDetails['delivery_time'].'</span>
                              </td>
                           </tr>
                        </table>
                     </td>
                  </tr>';
        }else {
            $deliveryCharge = '';
            $deliveryAddress = '<tr>
                     <td align="center" height="100%" valign="top" width="100%" style="padding:0px 20px 20px 20px;background-color:#fff">
                        <table align="center" border="0" cellpadding="0" cellspacing="0" width="100%" style="width:670px;padding:10px;">
                           <tr>
                              <td align="left" valign="top" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 16px; font-weight: 400; line-height: 24px; padding-top:15px">
                                 <span style="font-weight: 700;">Pickup Address</span>
                                 <span style="padding-top:0px;display:block">'.$orderDetails['restaurant']['restaurant_name'].'<br>'.$orderDetails['restaurant']['contact_address'].'<br>'.$orderDetails['restaurant']['contact_phone'].'</span>
                              </td>
                              <td align="right" valign="top" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 16px; font-weight: 400; line-height: 24px; padding-top:15px">
                                 <span style="font-weight: 700;">Pickup Time / Date</span>
                                 <span style="padding-top:0px;display:block">'.date('Y-m-d',strtotime($orderDetails['delivery_date'])).' '.$orderDetails['delivery_time'].'</span>
                              </td>
                           </tr>
                        </table>
                     </td>
                  </tr>';

        }

        if($orderDetails['offer_amount'] > 0) {
            $offerDetails = '<tr>
                              <td align="left" style="">
                                 <table cellspacing="0" cellpadding="0" border="0" width="100%">
                                    <tr>
                                       <td width="75%" align="right" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 15px; font-weight: 600; line-height: 24px; padding: 10px;border-top: 1px solid #eeeeee;">
                                          Offer('.$orderDetails['offer_percentage'].') %
                                       </td>
                                       <td width="25%" align="right" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 15px; font-weight: 600; line-height: 24px; padding: 10px;border-top: 1px solid #eeeeee;">
                                          '.$this->siteSettings["site_currency"].' '.number_format($orderDetails['offer_amount'],2).'
                                       </td>
                                    </tr>
                                 </table>
                              </td>
                           </tr>';
        }

        if($orderDetails['voucher_amount'] > 0) {
            $voucherDetails = '<tr>
                              <td align="left" style="">
                                 <table cellspacing="0" cellpadding="0" border="0" width="100%">
                                    <tr>
                                       <td width="75%" align="right" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 15px; font-weight: 600; line-height: 24px; padding: 10px;border-top: 1px solid #eeeeee;">
                                          Offer('.$orderDetails['voucher_percentage'].') %
                                       </td>
                                       <td width="25%" align="right" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 15px; font-weight: 600; line-height: 24px; padding: 10px;border-top: 1px solid #eeeeee;">
                                          '.$this->siteSettings["site_currency"].' '.number_format($orderDetails['voucher_amount'],2).'
                                       </td>
                                    </tr>
                                 </table>
                              </td>
                           </tr>';
        }

        if($orderDetails['reward_used'] == 'N' && $orderDetails['reward_offer'] > 0) {
            $rewardDetails = '<tr>
                              <td align="left" style="">
                                 <table cellspacing="0" cellpadding="0" border="0" width="100%">
                                    <tr>
                                       <td width="75%" align="right" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 15px; font-weight: 600; line-height: 24px; padding: 10px;border-top: 1px solid #eeeeee;">
                                          Offer('.$orderDetails['reward_offer_percentage'].') %
                                       </td>
                                       <td width="25%" align="right" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 15px; font-weight: 600; line-height: 24px; padding: 10px;border-top: 1px solid #eeeeee;">
                                          '.$this->siteSettings["site_currency"].' '.number_format($orderDetails['reward_offer'],2).'
                                       </td>
                                    </tr>
                                 </table>
                              </td>
                           </tr>';
        }
        $cartDetails = '';

        if(!empty($orderDetails['carts'])) {
            foreach($orderDetails['carts'] as $cKey => $cValue) {

                $menuName = $cValue['menu_name'];

                $subAddons = ($cValue['subaddons_name'] != "") ? $cValue['subaddons_name'] : "";

                $cartDetails .= '
                                <tr>
                                   <td width="10%" align="left" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 15px; font-weight: 400; line-height: 24px; padding: 15px 10px 5px 10px;border-bottom:1px solid #eee;">'.($cKey+1).'</td>
                                   <td width="45%" align="left" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 15px; font-weight: 400; line-height: 24px; padding: 15px 10px 5px 10px;border-bottom:1px solid #eee;">'.$menuName.' '.$subAddons.'</td>
                                   <td width="10%" align="left" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 15px; font-weight: 400; line-height: 24px; padding: 15px 10px 5px 10px;border-bottom:1px solid #eee;">'.$cValue['quantity'].'</td>
                                   <td width="15%" align="left" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 15px; font-weight: 400; line-height: 24px; padding: 15px 10px 5px 10px;border-bottom:1px solid #eee;">
                                      '.$this->siteSettings["site_currency"].' '.number_format($cValue['menu_price'],2).'
                                   </td>
                                   <td width="20%" align="right" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 15px; font-weight: 400; line-height: 24px; padding: 15px 10px 5px 10px;border-bottom:1px solid #eee;">
                                      '.$this->siteSettings["site_currency"].' '.number_format($cValue['total_price'],2).'
                                   </td>
                                </tr>';

            }
        }

        if($orderDetails['order_description'] != "") {
            $orderDescription = '<tr>
                     <td align="center" height="100%" valign="top" width="100%" style="padding:20px;background-color:#fff">
                        <table align="center" border="0" cellpadding="0" cellspacing="0" width="100%" style="width:670px;background:#eee;padding:10px;">
                           <tr>
                              <td align="left" width="50%" valign="top" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 16px; font-weight: 400; line-height: 24px;">
                                 <span style="font-weight: 700; display:block;">Order Instruction : '.$orderDetails['order_description'].'</span>
                                 
                              </td>                              
                           </tr>
                        </table>
                     </td>
                  </tr>';
        }

        $html = '
         <tr>
            <td align="center" style="background-color: #eeeeee;" bgcolor="#eeeeee">
               <table align="center" border="0" cellpadding="0" cellspacing="0" width="100%" style="max-width:767px;">
                  <tr>
                     <td align="center" valign="top" style="font-size:0; padding: 15px;" bgcolor="#FF6300">
                        <div style="display:inline-block; vertical-align:middle; text-align:center">
                           <table align="left" border="0" cellpadding="0" cellspacing="0" width="100%" style="max-width:300px;">
                              <tr>
                                 <td align="left" valign="top" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 34px; font-weight: 800;">
                                    <img width="170" src="'.DRIVERS_LOGO_URL.'/uploads/siteImages/siteLogo/'.$this->siteSettings['site_logo'].'">
                                 </td>
                              </tr>
                           </table>
                        </div>
                     </td>
                  </tr>
                  <tr>
                     <td align="center" style="padding: 20px; background-color: #ffffff;" bgcolor="#ffffff">
                        <table align="center" border="0" cellpadding="0" cellspacing="0" width="100%" style="max-width:670px;">
                           <tr>
                              <td align="center" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 16px; font-weight: 400; line-height: 24px;">
                                 <img src="'.BASE_URL.'images/tick.png" width="100" style="display: block; border: 0px;" />
                                 <h2 style="font-size: 28px; font-weight: 800; line-height: 36px; color: #333333; margin: 0;">
                                    Thank You For Your Order!
                                 </h2>
                              </td>
                           </tr>
                           <tr>
                              <td align="left" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 16px; font-weight: 400; line-height: 24px; padding-top: 10px;">
                                 <p style="font-size: 16px; font-weight: 400; line-height: 24px; color: #777777;">
                                    <span style="display:block;">Dear <strong style=" color:#000;">'.$orderDetails['customer_name'].'</strong></span>
                                    Thank you for shopping with us.Your order details below for the <span style="color:#000;font-weight:bold;">order ID '.$orderDetails['order_number'].'</span>, We gladly confirm your online order for delivery.
                                 </p>
                              </td>
                           </tr>
                           
                           <tr>
                              <td align="left" style="padding-top: 20px;">
                                 <table cellspacing="0" cellpadding="0" border="0" width="100%">
                                    <tr>
                                   <td  width="10%" align="left" bgcolor="#eeeeee" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 15px; font-weight: 700; line-height: 24px; padding: 10px;">S.No</td>
                                   <td width="45%" align="left" bgcolor="#eeeeee" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 15px; font-weight: 700; line-height: 24px; padding: 10px;">Menu Name</td>
                                   <td width="10%" align="left" bgcolor="#eeeeee" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 16px; font-weight: 700; line-height: 24px; padding: 10px;">Qty</td>
                                   <td width="15%" align="left" bgcolor="#eeeeee" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 15px; font-weight: 700; line-height: 24px; padding: 10px;">
                                      Price
                                   </td>
                                   <td width="20%" align="right" bgcolor="#eeeeee" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 15px; font-weight: 700; line-height: 24px; padding: 10px;">
                                      Total Price
                                   </td>
                                </tr>
                                    '.$cartDetails.'                                 
                                 </table>
                              </td>
                           </tr>   
                                 
                           
                           <tr>
                              <td align="left" style="">
                                 <table cellspacing="0" cellpadding="0" border="0" width="100%">
                                    <tr>
                                       <td width="75%" align="right" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 15px; font-weight: 600; line-height: 24px; padding: 10px;border-top: 1px solid #eeeeee;">
                                          Sub Total
                                       </td>
                                       <td width="25%" align="right" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 15px; font-weight: 600; line-height: 24px; padding: 10px;border-top: 1px solid #eeeeee;">
                                          '.$this->siteSettings["site_currency"].' '.number_format($orderDetails['order_sub_total'],2).'
                                       </td>
                                    </tr>
                                 </table>
                              </td>
                           </tr>
                           <tr>
                              <td align="left" style="">
                                 <table cellspacing="0" cellpadding="0" border="0" width="100%">
                                    <tr>
                                       <td width="75%" align="right" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 15px; font-weight: 600; line-height: 24px; padding: 10px;border-top: 1px solid #eeeeee;">
                                          Tax('.$orderDetails['tax_percentage'].') %
                                       </td>
                                       <td width="25%" align="right" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 15px; font-weight: 600; line-height: 24px; padding: 10px;border-top: 1px solid #eeeeee;">
                                          '.$this->siteSettings["site_currency"].' '.number_format($orderDetails['tax_amount'],2).'
                                       </td>
                                    </tr>
                                 </table>
                              </td>
                           </tr>
                           '.$deliveryCharge.'                           
                           '.$offerDetails.'
                           '.$voucherDetails.'
                           '.$rewardDetails.'

                           <tr>
                              <td align="left" style="">
                                 <table cellspacing="0" cellpadding="0" border="0" width="100%">
                                    <tr>
                                       <td width="75%" align="right" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 16px; font-weight: 600; line-height: 24px; padding: 10px; border-top: 3px solid #eeeeee; border-bottom: 3px solid #eeeeee;">
                                          TOTAL
                                       </td>
                                       <td width="25%" align="right" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 16px; font-weight: 600; line-height: 24px; padding: 10px; border-top: 3px solid #eeeeee; border-bottom: 3px solid #eeeeee;">
                                          '.$this->siteSettings["site_currency"].' '.number_format($orderDetails['order_grand_total'],2).'
                                       </td>
                                    </tr>
                                 </table>
                              </td>
                           </tr>
                        </table>
                     </td>
                  </tr>
                  <tr>
                     <td align="center" height="100%" valign="top" width="100%" style="padding:20px;background-color:#fff">
                        <table align="center" border="0" cellpadding="0" cellspacing="0" width="100%" style="width:670px;background:#eee;padding:10px;">
                           <tr>
                              <td align="left" width="50%" valign="top" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 16px; font-weight: 400; line-height: 24px;">
                                 <span style="font-weight: 700; display:block;">Order Number/ID : '.$orderDetails['order_number'].'</span>
                                 <span style="font-weight: 700; display:block;">Payment method : '.$paymentMethod.'</span>
                              </td>
                              <td align="right" width="50%" valign="top" style="font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 16px; font-weight: 400; line-height: 24px;">
                                 <span style="font-weight: 700; display:block;">Order type : '.ucfirst($orderDetails['order_type']).'</span>
                                 <span style="font-weight: 700; display:block;">Payment status : '.$paymentStatus.' </span>
                              </td>
                           </tr>
                        </table>
                     </td>
                  </tr>
                  '.$deliveryAddress.'
                  
                  '.$orderDescription.'
                  <tr>
                     <td align="center" valign="top" style="font-size:0; padding: 10px;" bgcolor="#FF6300"><div style="color:#fff;font-family: Open Sans, Helvetica, Arial, sans-serif; font-size: 16px; font-weight: 400; line-height: 24px;">Copyrights @ 2018</div></td>
                  </tr>
               </table>
            </td>
         </tr>';

        $mailContent  	 = $html;
        $customerSubject = 'Order Accepted - '.$orderDetails['order_number'];;
        $siteName   	 = $this->siteSettings['site_name'];
        $site_url = BASE_URL;
        $source   = BASE_URL.'images/logo-home.png';
        $fromMail = $this->siteSettings['order_email'];
        $email = new Email();
        $email->setFrom($fromMail);
        $email->setTo($orderDetails['customer_email']);
        $email->setSubject($customerSubject);
        $email->setTemplate('order');
        $email->setEmailFormat('html');
        $email->setViewVars(array('mailContent' => $mailContent,
            'source' => $source,
            'storename' => $siteName));

        $email->send();

        //Mail to Restaurant

        $toMail = ($orderDetails['restaurant']['email_order'] == 'Yes') ? $orderDetails['restaurant']['order_email'] : $orderDetails['restaurant']['contact_email'];

        $mailContent  	 = $html;
        $customerSubject = 'New Order - '.$orderDetails['order_number'];
        $siteName   	 = $this->siteSettings['site_name'];
        $site_url = BASE_URL;
        $source   = BASE_URL.'images/logo-home.png';
        $fromMail = $orderDetails['customer_email'];
        $email = new Email();
        $email->setFrom($fromMail);
        $email->setTo($toMail);
        $email->setSubject($customerSubject);
        $email->setTemplate('order');
        $email->setEmailFormat('html');
        $email->setViewVars(array('mailContent' => $mailContent,
            'source' => $source,
            'storename' => $siteName));

        //$email->send();

        //Mail to Admin
        $mailContent  	 = $html;
        $customerSubject = 'New Order - '.$orderDetails['order_number'];
        $siteName   	 = $this->siteSettings['site_name'];
        $site_url = BASE_URL;
        $source   = BASE_URL.'images/logo-home.png';
        $fromMail = $orderDetails['customer_email'];
        $email = new Email();
        $email->setFrom($fromMail);
        $email->setTo($this->siteSettings['order_email']);
        $email->setSubject($customerSubject);
        $email->setTemplate('order');
        $email->setEmailFormat('html');
        $email->setViewVars(array('mailContent' => $mailContent,
            'source' => $source,
            'storename' => $siteName));

        //$email->send();
        return true;

    }
}