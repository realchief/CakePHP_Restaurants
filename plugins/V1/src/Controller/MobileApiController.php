<?php
/**
 * Created by NagaRaj.V 
 * Date: 20/Jan/18
 * Time: 19:00 PM
 */
namespace V1\Controller;

use Cake\Mailer\Email;
use RestApi\Controller\ApiController;

class MobileApiController extends ApiController{

    public function initialize(){
     	parent::initialize(); // TODO: Change the autogenerated stub
        $http = (isset($_SERVER["HTTPS"])) ? 'https://' : 'http://';
        $this->BaseUrl   = $http.$_SERVER['HTTP_HOST'].'/foodlove/';
        $this->loadComponent('Auth');
        $this->loadComponent('Common');
        $this->loadComponent('PushNotification');
        $this->loadComponent('FcmNotification');
        $this->loadComponent('IosNotification');
        $this->loadComponent('Twilio');
        $this->loadModel('Users');
        $this->loadModel('Drivers');
        $this->loadModel('DriverTrackings');
        $this->loadModel('Orders');
        $this->loadModel('Orderstatuses');
        $this->loadModel('Carts');
        $this->loadModel('Restaurants');
        $this->loadModel('Sitesettings');
        $this->loadModel('DriverInvoices');
        $this->loadModel('Countries');
        $this->loadModel('Notifications');
        // Before Login , these are the function we can access
        $this->Auth->allow([
            'request',
            'DriverSignupMail'
        ]);
    }

    public function index(){
    	$this->httpStatusCode = 200;
        $this->apiResponse['you_response'] = 'Invalid option';        
    }


    public function request() {

        $siteSettings = $this->Sitesettings->find('all', [
            'conditions' => [
                'id' => '1'
            ]
        ])->hydrate(false)->first();

        define('PUSHER_APPID',$siteSettings['pusher_id']);
        define('PUSHER_SECRET',$siteSettings['pusher_secret']);
        define('PUSHER_AUTHKEY',$siteSettings['pusher_key']);

        define('SMS_TOKEN',$siteSettings['sms_token']);
        define('SMS_SID',$siteSettings['sms_id']);
        define('SMS_FROM',$siteSettings['sms_source_number']);

        $response = [];
        if($this->request->is(['post','put'])) {
            $getData = $this->request->getData();

            switch (trim($this->request->getData('action'))) {
                case 'DriverSignup':
                    if (!empty($getData['username']) && !empty($getData['password'])) {
                        $driver = $this->Users->find('all', [
                            'fields' => [
                                'id'
                            ],
                            'conditions' => [
                                'Users.username' => $getData['username'],
                                'Users.deleted_status' => 'N'

                            ]
                        ])->hydrate(false)->toArray();

                        if (!empty($driver)) {
                            $response['success'] = '0';
                            $response['message'] = 'Driver Already Exists';
                            break;
                        } else {
                            $getData['role_id']  = 5;
                            $getData['phone_number']  = $getData['username'];
                            $userEntity = $this->Users->newEntity($getData);
                            $userTable = $this->Users->save($userEntity);

                            $getData['user_id'] = $userTable->id;
                            $getData['phone_number']  = $getData['username'];
                            $getData['username']  = $getData['driver_email'];
                            $getData['status'] = '1';
                            $getData['created_id']  = '1';
                            $driverEntity = $this->Drivers->newEntity($getData);
                            $saveDriver = $this->Drivers->save($driverEntity);
                            $this->DriverSignupMail($this->request->getData(),$saveDriver->id);
                            $response['success'] = 1;
                            $response['message'] = 'You have successfully registered an account. Admin will contact soon';
                        }
                    } else {
                        $response['success'] = 0;
                        $response['message'] = 'Username/password missing';
                    }
                    break;

                case 'DriverLogin':

                    $driver = $this->Auth->identify();
                    if (!empty($driver)) {
                        $getDriver = $this->Users->find('all', [
                            'conditions' => [
                                'Users.id' => $driver['id'],
                            ],
                            'contain' => [
                                'Drivers' => [
                                    'conditions' => [
                                        'Drivers.delete_status' => 'N'
                                    ]
                                ]
                            ]
                        ])->hydrate(false)->first();

                        $driverDetails = $getDriver['drivers'][0];

                        if (empty($driverDetails)) {
                            $response['success'] = 0;
                            $response['message'] = 'Something went wrong..!';
                            break;
                        }

                        if ($driverDetails['is_logged'] == 1) {
                            $response['success'] = 0;
                            $response['message'] = 'Driver Already Loggedin';
                            break;
                        }

                        if ($driverDetails['status'] == 0) {
                            $response['success'] = 0;
                            $response['message'] = 'Your account deactivated';
                            break;
                        }

                        $siteSettings = $this->Sitesettings->find('all', [
                            'conditions' => [
                                'id' => '1'
                            ]

                        ])->hydrate(false)->first();

                        /*if ($driverDetails['vechile_name'] == '') {
                            $response['success'] = 0;
                            $response['message'] = 'Vehicle not registered';
                            break;
                        }*/

                        $updateDriver['id'] = $driverDetails['id'];
                        $updateDriver['device_id'] = $getData['device_id'];
                        $updateDriver['is_logged'] = 1;
                        $updateDriver['device_name'] = strtoupper($getData['device_name']);
                        $updateDriver['driver_status'] = 'Available';

                        $driverEntity = $this->Drivers->newEntity($updateDriver);
                        $this->Drivers->save($driverEntity);
                        $response['success'] = '1';
                        $response['driverid'] = $driverDetails['id'];
                        $response['driverName'] = $driverDetails['driver_name'];
                        $response['driverPhone'] = $driverDetails['phone_number'];
//                        $response['currency'] = $this->siteSetting['Country']['currency_symbol'];

                        /*$driverImage = (!empty($driver['Driver']['image']))
                            ? $this->siteUrl . '/driversImage/' . $driver['Driver']['image']
                            : $this->siteUrl . '/driversImage/no-photo.png';*/

//                        $response['driverImage'] = $driverImage;

                        $message = 'Driver : '.$driverDetails['driver_name']." loggedin";

                        $this->PushNotification->driverNotification($message);

                        $this->PushNotification->driverNotification($message, $driverDetails['created_id']);

                        $response['currency'] = 'usd';
                        $response['currency_symbol'] = $siteSettings['site_currency'];
                        $response['driverImage'] = (!empty($driverDetails['image'])) ? $driverDetails['image'] : 'no-photo.png';
                        $response['driverStatus'] = 'Available';
                        $response['message'] = 'login successfully';
                    } else {
                        $response['success'] = '0';
                        $response['message'] = 'Incorrect username and password';

                    }
                    break;

                case 'DriverImageUpload':

                    $driverDetails = $this->Drivers->find('all',[
                        'conditions' => [
                            'Drivers.id' => $getData['driverid']
                        ]
                    ])->hydrate(false)->first();

                    if (!empty($driverDetails)) {

                        // Get image string posted from Android App
                        //$base = $getData['image'];

                        if (!empty($getData['image'])) {

                            require_once(ROOT . DS . 'vendor' . DS . 'Cloudinary'. DS . 'Cloudinary.php');
                            require_once(ROOT . DS . 'vendor' . DS . 'Cloudinary'. DS . 'Uploader.php');
                            require_once(ROOT . DS . 'vendor' . DS . 'Cloudinary'. DS . 'Api.php');

                            \Cloudinary::config(array(
                                "cloud_name" => "ecomm",
                                "api_key" => "592822126694246",
                                "api_secret" => "zUnIKe8df1-br5DNumVH7CM2HKk"
                            ));
                            $base = $this->request->getData('image');

                            if(strtoupper($driverDetails['device_name']) != 'ANDROID') {
                                $imageSrc = str_replace(" ","+",$base);
                            } else {
                                $base = explode('\n', $base);
                                $imageSrc = '';
                                foreach ($base as $key => $value) {
                                    $imageSrc .= stripslashes($value);
                                }
                            }

                            // Get file name posted from Android App
                            $fileId = $driverDetails['id'].time().'.png';
                            $filename = WWW_ROOT.'uploads/driversImage/'.$fileId;

                            // Decode Image
                            $binary = base64_decode(trim($imageSrc));
                            header('Content-Type: bitmap; charset=utf-8');

                            $file = fopen($filename, 'wb+');
                            // Create File
                            fwrite($file, $binary);
                            fclose($file);

                            $data = \Cloudinary\Uploader::upload($filename,
                                array(
                                    "public_id" => $getData['driverid'],
                                    "tags" => array( "special", "for_homepage" )
                                ));

                            $updateDriver['id'] = $driverDetails['id'];
                            $updateDriver['image'] = $data['secure_url'];

                            $driverEntity = $this->Drivers->newEntity();
                            $driverEntity = $this->Drivers->patchEntity($driverEntity, $updateDriver);

                            $this->Drivers->save($driverEntity);
                            unlink($filename);
                            $driver = $this->Drivers->find('all',[
                                'conditions' => [
                                    'Drivers.id' => $getData['driverid']
                                ]
                            ])->hydrate(false)->first();

                            $response['success'] = 1;
                            $response['message'] = 'Image uploaded successfully!';
                            $response['driverImage'] = $driver['image'];
                            //pr($response); die;
                        } else {
                            $response['success']        = 0;
                            $response['message']        = 'Image is not uploaded';
                        }
                    } else {
                        $response['success']        = 0;
                        $response['message']        = 'Unknown driver';
                    }

                    break;

                case 'DriverDetails':

                    $driverDetails = $this->Drivers->find('all',[
                        'conditions' => [
                            'Drivers.id' => $getData['driverid']
                        ]
                    ])->hydrate(false)->first();
                    
                    if (!empty($driverDetails)) {

                        /*$driverDetailsImage = (!empty($driverDetails['image']))
                            ? $this->siteUrl.'/driversImage/'.$driverDetails['image']
                            : $this->siteUrl.'/driversImage/no-photo.png';*/

                        $driverImage = '';

                        $response['success']        = 1;
                        $response['DriverId']       = $getData['driverid'];
                        $response['DriverName']     = $driverDetails['driver_name'];
                        $response['DriverMail']     = $driverDetails['username'];
                        $response['DriverMobile']   = $driverDetails['phone_number'];
                        $response['driverImage']    = !empty($driverDetails['image']) ? $driverDetails['image'] : '';


                    } else {
                        $response['success']        = 0;
                        $response['message']        = 'Unknown driver';
                    }

                    break;


                case 'DriverUpdate':

                    $driverDetails = $this->Drivers->find('all',[
                        'conditions' => [
                            'Drivers.id' => $getData['driverid']
                        ]
                    ])->hydrate(false)->first();

                    if (!empty($driverDetails)) {

                        $updateDriver['id'] = $getData['driverid'];
                        $updateDriver['driver_name'] = $getData['driverName'];
                        $updateDriver['username'] = $getData['driverMail'];

                        $driverEntity = $this->Drivers->newEntity($updateDriver);
                        $this->Drivers->save($driverEntity);

                        $response['success'] = 1;
                        $response['message'] = 'Updated successfully!';
                    } else {
                        $response['success'] = 0;
                        $response['message'] = 'Unknown driver!';
                    }
                    break;

                case 'DriverLocation':

                    $driverDetails = $this->Drivers->find('all',[
                        'conditions' => [
                            'Drivers.id' => $getData['driverid']
                        ]
                    ])->hydrate(false)->first();

                    if (!empty($driverDetails)) {

                        $track = $this->DriverTrackings->find('all',[
                            'conditions' => [
                                'DriverTrackings.driver_id' => $getData['driverid']
                            ]
                        ])->hydrate(false)->first();

                        $tracking['id']        = ($track['id'] != '') ? $track['id'] : '';
                        $tracking['driver_id'] = $getData['driverid'];
                        $tracking['driver_latitude']  = $getData['latitude'];
                        $tracking['driver_longitude'] = $getData['longitude'];

                        $driverTrackEntity = $this->DriverTrackings->newEntity($tracking);
                        $this->DriverTrackings->save($driverTrackEntity);

                        $response['success'] = 1;
                    } else {
                        $response['success'] = 0;
                        $response['message'] = 'Unknown driver!';
                    }
                    break;

                case 'DriverStatus':

                    $driverDetails = $this->Drivers->find('all',[
                        'conditions' => [
                            'Drivers.id' => $getData['driverid']
                        ]
                    ])->hydrate(false)->first();



                    if (!empty($driverDetails)) {

                        $updateDriver['id'] = $getData['driverid'];
                        $updateDriver['driver_status'] = $getData['status'];

                        //echo "<pre>";print_r($driverDetails);die();

                        $driverTrackEntity = $this->Drivers->newEntity($updateDriver);
                        $this->Drivers->save($driverTrackEntity);

                        $response['success'] = 1;
                        $response['message'] = 'Status changed';

                    } else {
                        $response['success'] = 0;
                        $response['message'] = 'Unknown driver!';
                    }
                    break;


                case 'OrderStatus':

                    $siteCountry = $this->Countries->find('all', [
                        'conditions' => [
                            'id' => $siteSettings['site_country']
                        ]
                    ])->hydrate(false)->first();

                    $countryCode = $siteCountry['phone_code'];


                    if ($getData['driverid'] == '' || $getData['orderid'] == '' || $getData['status'] == '') {
                        $response['success'] = 0;
                        $response['message'] = 'Missing arugument';
                    }


                    $getData['status'] = (strtolower(trim($getData['status'])) == 'reject')
                        ? 'Accepted' : $getData['status'];


                    $orderDedtails = $this->Orders->find('all',[
                        'conditions' => [
                            'Orders.id' =>  $getData['orderid'],
                        ],
                        'order' => [
                            'Orders.id DESC'
                        ],
                        'contain' =>[
                            'Drivers',
                            'Users',
                            'Restaurants'
                        ]
                    ])->hydrate(false)->first();

                    //pr($orderDedtails);exit();
                    if (!empty($orderDedtails)) {

                        $updateOrderStatus['id'] = $getData['orderid'];
                        $updateOrderStatus['status'] = $getData['status'];
                        $updateOrderStatus['driver_id'] = ($getData['status'] == 'Accepted') ? 0 : $getData['driverid'];

                        $orderStatus['id']                = '';
                        $orderStatus['status']            = $getData['status'];
                        $orderStatus['order_id']          = $getData['orderid'];
                        $orderStatus['driver_id']         = $getData['driverid'];
                        $orderStatus['driver_latitude']   = $orderDedtails['destination_latitude'];
                        $orderStatus['driver_longitude']  = $orderDedtails['destination_longitude'];
                        if ($getData['status'] != 'Accepted') {
                            $orderStatusEntity = $this->Orderstatuses->newEntity($orderStatus);
                            $this->Orderstatuses->save($orderStatusEntity);

                            //Old Dispatch Notification
                            //$this->PushNotification->trackingNotification($orderDedtails['order_number'],$getData['status']);

                        } else {
                            $this->Orderstatuses->deleteAll(
                                [
                                    'Orderstatus.order_id'=>$getData['orderid']
                                ]);
                            //$this->PushNotification->rejectNotification($orderDedtails['order_number']);
                        }
                        if ($getData['status'] == 'Delivered') {
                            // Get image string posted from Android App
                            $base = $getData['image'];

                            if (strtoupper($orderDedtails['driver']['device_name']) != 'ANDROID') {
                                $imageSrc = str_replace(" ", "+", $base);
                            } else {
                                $base = explode('\n', $base);
                                $imageSrc = '';
                                foreach ($base as $key => $value) {
                                    $imageSrc .= stripslashes($value);
                                }
                            }

                            // Get file name posted from Android App
                            $fileId = 'Order_signature' . $getData['orderid'] . '.png';
                            $filename = WWW_ROOT . 'uploads' . DS . 'orderproof' . DS . $fileId;


                            // Decode Image
                            $binary = base64_decode(trim($imageSrc));
                            header('Content-Type: bitmap; charset=utf-8');

                            $file = fopen($filename, 'wb+');
                            fwrite($file, $binary);
                            fclose($file);

                            require_once(ROOT . DS . 'vendor' . DS . 'Cloudinary' . DS . 'Cloudinary.php');
                            require_once(ROOT . DS . 'vendor' . DS . 'Cloudinary' . DS . 'Uploader.php');
                            require_once(ROOT . DS . 'vendor' . DS . 'Cloudinary' . DS . 'Api.php');

                            \Cloudinary::config(array(
                                "cloud_name" => "dntzmscli",
                                "api_key" => "213258421718748",
                                "api_secret" => "vTrAbTdKHswpiOQZcHvCv9LqZ3M"
                            ));

                            $data = \Cloudinary\Uploader::upload($filename,
                                array(
                                    "public_id" => $getData['driverid'],
                                    "tags" => array( "special", "for_homepage" )
                                ));

                            $orderProof['id'] = $getData['orderid'];
                            $orderProof['order_proof'] = $data['secure_url'];


                            //Driver Basic Details
                            $driverDetails = $this->Drivers->find('all', [
                                'conditions' => [
                                    'id' => $orderDedtails['driver_id']
                                ]
                            ])->hydrate(false)->first();

                            $sourcelatitude = $orderDedtails['source_latitude'];
                            $sourcelongitude = $orderDedtails['source_longitude'];
                            $latitudeTo = $orderDedtails['destination_latitude'];
                            $longitudeTo = $orderDedtails['destination_longitude'];

                            $unit='K';
                            $distance = $this->Common->getDistanceValue($sourcelatitude,$sourcelongitude,$latitudeTo,$longitudeTo,
                                $unit);

                            $distance = str_replace(',','',$distance);

                            $orderProof['payout_type'] = $driverDetails['payout'];
                            $orderProof['payout_amount'] = $driverDetails['payout_amount'];
                            $orderProof['payment_status'] = 'P';
                            $orderProof['distance'] = $distance;
                            $orderProof['driver_deliver_date'] = date('Y-m-d');

                            $orderEntity = $this->Orders->newEntity();
                            $orderEntity = $this->Orders->patchEntity($orderEntity, $orderProof);

                            $this->Orders->save($orderEntity);

                            //Reward Points

                            $this->loadModel('Rewards');
                            $this->loadModel('CustomerPoints');

                            $rewardPoints = $this->Rewards->find('all', [
                                'conditions' => [
                                    'id' => '1'
                                ]
                            ])->hydrate(false)->first();

                            $getRestaurantOption = $this->Restaurants->find('all', [
                                'fields' => [
                                    'reward_option'
                                ],
                                'conditions' => [
                                    'id' => $orderDedtails['restaurant']['id'],
                                ]
                            ])->hydrate(false)->first();



                            if(!empty($rewardPoints) && $getRestaurantOption['reward_option'] == 'Yes') {
                                $grandTotal = $orderDedtails['order_sub_total'];
                                $rewardAmount = $rewardPoints['reward_amount'];
                                $rewardPoints = $rewardPoints['reward_point'];

                                $getRewardFromTotal = $grandTotal/$rewardAmount;

                                $orderPoint = $getRewardFromTotal * $rewardPoints;

                                $customerPoint['order_id'] = $orderDedtails['id'];
                                $customerPoint['restaurant_name'] = $orderDedtails['restaurant']['restaurant_name'];
                                $customerPoint['customer_id'] = $orderDedtails['customer_id'];
                                $customerPoint['total'] = $grandTotal;
                                $customerPoint['points'] = $orderPoint;
                                $customerPoint['type'] = 'Earned';

                                $customerPointEntity = $this->CustomerPoints->newEntity();
                                $customerPointPatch = $this->CustomerPoints->patchEntity($customerPointEntity,$customerPoint);
                                $customerPointSave = $this->CustomerPoints->save($customerPointPatch);
                            }

                            //SMS TO customer
                            $customerMessage = 'Your order ' . $orderDedtails['order_number'].' was delivered successful';

                            if($siteSettings['sms_option'] == 'Yes') {
                                $toCustomerNumber = '+'.$countryCode.$orderDedtails['customer_phone'];
                                $customerSms      = $this->Twilio->sendMessage($toCustomerNumber, $customerMessage);
                            }

                        }

                        $orderEntity = $this->Orders->newEntity($updateOrderStatus);
                        $this->Orders->save($orderEntity);

                        $customerDevice = $orderDedtails['user']['device_id'];

                        if ($orderStatus == 'Failed') {
                            $customerMessage = 'Your disclaim order '.$orderDedtails['order_number'].' '.$getData['status'];
                        } elseif ($orderStatus == 'Delivered') {
                            $customerMessage = 'Your delivered order '.$orderDedtails['order_number'].' '.$getData['status'];
                        } else {
                            $customerMessage = 'Your order '.$orderDedtails['order_number'].' '.$getData['status'];
                        }

                        if (!empty($customerDevice)) {


                            $notificationdata['data']['title']          = "orderstatus";
                            $notificationdata['data']['message']        = $customerMessage;
                            $notificationdata['data']['is_background']  = false;
                            $notificationdata['data']['payload']        = array('OrderDetails' => "",'type'    => "neworder");
                            $notificationdata['data']['timestamp']      = date('Y-m-d G:i:s');
                            $gcm  = (trim($orderDedtails['user']['device_type']) == 'Android') ?
                                $this->FcmNotification->sendNotification($notificationdata, $customerDevice) :
                                $this->IosNotification->notificationIOS($notificationdata['data']['message'], $customerDevice, 'Customer');
                        }

                        $this->PushNotification->customerNotification($orderDedtails['customer_id'],$orderDedtails['restaurant']['user_id'],$customerMessage);

                        $message = ($getData['status'] == 'Accepted') ?
                            $orderDedtails['order_number'].' is rejected by '.$orderDedtails['driver']['driver_name'] :
                            $orderDedtails['order_number']." - Order status changed to ".$getData['status'];

                        // Store Owner App Message
                        if ($orderDedtails['restaurant']['is_logged'] == 1) {
                            $deviceId = $orderDedtails['restaurant']['device_id'];
                            $notificationdata['data']['title']          = "orderstatus";
                            $notificationdata['data']['message']        = $message;
                            $notificationdata['data']['is_background']  = false;
                            $notificationdata['data']['payload']        = array('OrderDetails' => "",'type'    => "neworder");
                            $notificationdata['data']['timestamp']      = date('Y-m-d G:i:s');
                            $gcm      = $this->FcmNotification->sendNotification($notificationdata,$deviceId);

                        }

                        if ($getData['status'] != 'Accepted') {
                            //Old Dispatch Notification
                            $this->PushNotification->trackingNotification($orderDedtails['order_number'],$getData['status']);

                        } else {

                            $this->PushNotification->rejectNotification($orderDedtails['order_number']);
                        }



                        //New Dispatch Notification


                        $response['success'] = 1;
                        $response['message'] = 'Order Status Change Successfully';

                    } else {
                        $response['success'] = 0;
                        $response['message'] = 'Unauthorized';
                    }


                    break;


                case 'CompletedOrders':

                    $status = 'Delivered';
                    //$deliverDate  = date('Y-m-d', strtotime($this->request->getData('date')));

                    if ($this->request->getData('date') == '') {
                        $deliveryDate = date('Y-m-d');
                    }else {
                        $deliveryDate  = $this->request->getData('date');
                    }

                    $orderLists = $this->Orders->find('all',[
                        'conditions' => [
                            'Orders.driver_id' => $getData['driverid'],
                            'Orders.status' => $status,
                            'Orders.modified LIKE' =>  $deliveryDate.'%'

                        ],
                        'contain' => [
                            'Restaurants',
                            'Carts'
                        ],
                        'order' => [
                            'Orders.id DESC'
                        ]
                    ])->hydrate(false)->toArray();
                    if (!empty($orderLists)) {
                        foreach ($orderLists as $key => $value) {

                            $storeAddress = '';

                            $orderDetails[$key]['StoreName'] = $value['restaurant']['restaurant_name'];
                            $orderDetails[$key]['SourceAddress'] = $value['restaurant']['contact_address'];
                            $orderDetails[$key]['SourceLatitude'] = $value['source_latitude'];
                            $orderDetails[$key]['SourceLongitude'] = $value['source_longitude'];
                            $orderDetails[$key]['DestinationAddress'] =
                                ($this->siteSetting['Sitesetting']['address_mode'] != 'Google') ?
                                    $value['address'] . ', ' .
                                    $value['location_name'] . ', ' .
                                    $value['city_name'] . ', ' .
                                    $value['state_name'] : $value['google_address'];

                            $orderDetails[$key]['LandMark'] = $value['landmark'];
                            $orderDetails[$key]['DestinationLatitude'] = $value['destination_latitude'];
                            $orderDetails[$key]['DestinationLongitude'] = $value['destination_longitude'];
                            $orderDetails[$key]['Created'] = date('Y-m-d', strtotime($value['created']));
                            $orderDetails[$key]['OrderDate'] = $value['delivery_date'];
                            $orderDetails[$key]['OrderTime'] =
                                ($value['assoonas'] != 'now') ? $value['delivery_time'] : 'ASAP';
                            $orderDetails[$key]['OrderPrice'] = $value['order_grand_total'];
                            $orderDetails[$key]['OrderId'] = $value['id'];
                            $orderDetails[$key]['OrderGenerateId'] = $value['order_number'];
                            $orderDetails[$key]['OrderStatus'] = $value['status'];
                            $orderDetails[$key]['CustomerName'] = $value['customer_name'];
                            $orderDetails[$key]['PaymentType'] = $value['payment_method'];
                        }

                        $response['success'] = 1;
                        $response['orders'] = $orderDetails;

                    } else {
                        $response['success'] = 0;
                        $response['message'] = 'No record(s) found';
                    }

                    break;

                case 'DriverAcceptedOrders':

                    $orderLists = $this->Orders->find('all',[
                        'conditions' => [
                            'Orders.driver_id' => $getData['driverid'],
                            'OR' => [
                                ['Orders.status' => 'Driver Accepted'],
                                ['Orders.status' =>  'Collected']
                            ],
                        ],
                        'contain' => [
                            'Restaurants'
                        ],
                        'order' => [
                            'Orders.id DESC'
                        ]
                    ])->hydrate(false)->toArray();

                    $driverDetails = $this->Drivers->find('all',[
                        'conditions' => [
                            'Drivers.id' => $getData['driverid']
                        ]
                    ])->hydrate(false)->first();


                    if (!empty($orderLists)) {
                        foreach ($orderLists as $key => $value) {

                            $storeAddress = '';

                            $orderDetails[$key]['StoreName'] = $value['restaurant']['restaurant_name'];
                            $orderDetails[$key]['SourceAddress'] = $value['restaurant']['contact_address'];
                            $orderDetails[$key]['SourceLatitude'] = $value['source_latitude'];
                            $orderDetails[$key]['SourceLongitude'] = $value['source_longitude'];
                            $orderDetails[$key]['DestinationAddress'] =
                                ($this->siteSetting['Sitesetting']['address_mode'] != 'Google') ?
                                    $value['flat_no']. ' ,'.
                                    $value['address'] . ', ' .
                                    $value['location_name'] . ', ' .
                                    $value['city_name'] . ', ' .
                                    $value['state_name'] : $value['flat_no']. ' ,'.$value['google_address'];

                            $orderDetails[$key]['LandMark'] = $value['landmark'];
                            $orderDetails[$key]['DestinationLatitude'] = $value['destination_latitude'];
                            $orderDetails[$key]['DestinationLongitude'] = $value['destination_longitude'];
                            $orderDetails[$key]['Created'] = date('Y-m-d', strtotime($value['created']));
                            $orderDetails[$key]['OrderDate'] = $value['delivery_date'];
                            $orderDetails[$key]['OrderTime'] =
                                ($value['assoonas'] != 'now') ? $value['delivery_time'] : 'ASAP';
                            $orderDetails[$key]['OrderPrice'] = $value['order_grand_total'];
                            $orderDetails[$key]['OrderId'] = $value['id'];
                            $orderDetails[$key]['OrderGenerateId'] = $value['order_number'];
                            $orderDetails[$key]['OrderStatus'] = $value['status'];
                            $orderDetails[$key]['CustomerName'] = $value['customer_name'];
                            $orderDetails[$key]['PaymentType'] = $value['payment_method'];
                            $orderDetails[$key]['PaymentType'] = $value['payment_method'];
                        }

                        $response['success'] = 1;
                        $response['orders'] = $orderDetails;
                        $response['driver_status'] = $driverDetails['driver_status'];
                    } else {
                        $response['success'] = 0;
                        $response['driver_status'] = $driverDetails['driver_status'];
                        $response['message'] = 'No record(s) found';
                    }

                    break;


                case 'WaitingOrderCount':
                    $count = $this->Orders->find('all',[
                        'conditions' => [
                            'Orders.driver_id' => $getData['driverid'],
                            'Orders.status' => 'Waiting',
                        ],
                        'order' => [
                            'Orders.id DESC'
                        ]
                    ])->count();

                    if ($count > 0) {
                        $response['success'] = 1;
                        $response['waitingCount'] = $count;
                    } else {
                        $response['success'] = 0;
                        $response['message'] = 'No record(s) found';
                    }
                    break;

                case 'WaitingOrders':

                    $orderLists = $this->Orders->find('all',[
                        'conditions' => [
                            'Orders.driver_id' => $this->request->getData('driverid'),
                            'Orders.status' => 'Waiting'
                        ],
                        'contain' => [
                            'Restaurants'
                        ],
                        'order' => [
                            'Orders.id DESC'
                        ]
                    ])->hydrate(false)->toArray();


                    if (!empty($orderLists)) {
                        foreach ($orderLists as $key => $value) {

                            $storeAddress = '';

                            $orderDetails[$key]['StoreName'] = $value['restaurant']['restaurant_name'];
                            $orderDetails[$key]['SourceAddress'] = $value['restaurant']['contact_address'];
                            $orderDetails[$key]['SourceLatitude'] = $value['source_latitude'];
                            $orderDetails[$key]['SourceLongitude'] = $value['source_longitude'];
                            $orderDetails[$key]['DestinationAddress'] =
                                ($this->siteSetting['Sitesetting']['address_mode'] != 'Google') ?
                                    $value['flat_no']. ' ,'.
                                    $value['address'] . ', ' .
                                    $value['location_name'] . ', ' .
                                    $value['city_name'] . ', ' .
                                    $value['state_name'] : $value['flat_no']. ' ,'.
                                    $value['google_address'];

                            $orderDetails[$key]['LandMark'] = $value['landmark'];
                            $orderDetails[$key]['DestinationLatitude'] = $value['destination_latitude'];
                            $orderDetails[$key]['DestinationLongitude'] = $value['destination_longitude'];
                            $orderDetails[$key]['Created'] = date('Y-m-d', strtotime($value['created']));
                            $orderDetails[$key]['OrderDate'] = $value['delivery_date'];
                            $orderDetails[$key]['OrderTime'] =
                                ($value['assoonas'] != 'now') ? $value['delivery_time'] : 'ASAP';
                            $orderDetails[$key]['OrderPrice'] = $value['order_grand_total'];
                            $orderDetails[$key]['OrderId'] = $value['id'];
                            $orderDetails[$key]['OrderGenerateId'] = $value['order_number'];
                            $orderDetails[$key]['OrderStatus'] = $value['status'];
                            $orderDetails[$key]['CustomerName'] = $value['customer_name'];
                            $orderDetails[$key]['PaymentType'] = $value['payment_method'];
                        }

                        $response['success'] = 1;
                        $response['orders'] = $orderDetails;
                    } else {
                        $response['success'] = 0;
                        $response['message'] = 'No record(s) found';
                    }

                    break;

                case 'OrderDetail':

                    $value = $this->Orders->find('all',[
                        'conditions' => [
                            //'Orders.driver_id' => $getData['driverid'],
                            'Orders.id' =>  $getData['orderid'],
                        ],
                        'contain' => [
                            'Restaurants',
                            'Carts'
                        ],
                        'order' => [
                            'Orders.id DESC'
                        ]
                    ])->hydrate(false)->first();
                    //pr($value); die();
                    if (!empty($value)) {
                        $storeAddress = '';

                        $orderDetails['storeName'] = $value['restaurant']['restaurant_name'];
                        $orderDetails['SourceAddress'] = $value['restaurant']['contact_address'];
                        $orderDetails['sourceLatitude'] = $value['source_latitude'];
                        $orderDetails['sourceLongitude'] = $value['source_longitude'];

                        $orderDetails['customerAddress'] =
                            ($this->siteSetting['Sitesetting']['address_mode'] == 'Google') ?
                                $value['flat_no'] . ', ' .
                                $value['address'] : $value['flat_no']. ', ' .$value['address'];

                        $orderDetails['landMark'] = $value['landmark'];
                        $orderDetails['destinationLatitude'] = $value['destination_latitude'];
                        $orderDetails['destinationLongitude'] = $value['destination_longitude'];
                        $orderDetails['created'] = date('Y-m-d', strtotime($value['created']));
                        $orderDetails['OrderDate'] = $value['delivery_date'];
                        $orderDetails['OrderTime'] =
                            ($value['assoonas'] != 'now') ? $value['delivery_time'] : 'ASAP';
                        $orderDetails['orderPrice'] = $value['order_grand_total'];
                        $orderDetails['orderId'] = $value['id'];
                        $orderDetails['orderGenerateId'] = $value['order_number'];
                        $orderDetails['status'] = $value['status'];
                        $orderDetails['customerName'] = $value['customer_name'];
                        $orderDetails['doorNo'] = '';
                        $orderDetails['customerPhone'] = $value['customer_phone'];
                        $orderDetails['offer']         = $value['offer_amount'];
                        $orderDetails['voucherPercentage']  = $value['voucher_percentage'];
                        $orderDetails['voucherAmount']      = $value['voucher_amount'];
                        $orderDetails['tax']                = $value['tax_amount'];
                        $orderDetails['taxPercentage']      = $value['tax_percentage'];
                        $orderDetails['tipAmount']          = $value['tip_amount'];
                        $orderDetails['deliveryCharge']     = $value['delivery_charge'];
                        $orderDetails['subTotal']           = $value['order_sub_total'];
                        $orderDetails['total']              = $value['order_grand_total'];
                        $orderDetails['offerPercentage']    = $value['offer_percentage'];
                        $orderDetails['order_description']  = $value['order_description'];
                        $orderDetails['orderMenu']          = $value['carts'];

                        $orderDetails['PaymentType']        = $value['payment_method'];
                        $orderDetails['rewardOffer']         = $value['reward_offer'];
                        $orderDetails['rewardOfferPercentage'] = $value['reward_offer_percentage'];
                        $orderDetails['success']            = '1';

                        $response = $orderDetails;
                    } else {
                        $response['success'] = '0';
                        $response['message'] = 'There is no order(s)!';
                    }
                    break;

                case 'OrderDisclaim':

                    $OrderDetails = $this->Orders->find('all',[
                        'conditions' => [
                            'Orders.driver_id' => $getData['driverid'],
                            'Orders.id' =>  $getData['orderid'],
                        ],
                        'contain' => [
                            'Users'
                        ],
                        'order' => [
                            'Orders.id DESC'
                        ]
                    ])->hydrate(false)->first();

                    $driverDetails = $this->Drivers->find('all', [
                        'conditions' => [
                            'id' => $getData['driverid']
                        ]
                    ])->hydrate(false)->first();

                    if (!empty($OrderDetails)) {
                        $updateOrder['id'] = $getData['orderid'];

                        if(strtolower($getData['reason']) != 'traffic') {
                            $updateOrder['status'] = 'Accepted';
                            $updateOrder['driver_id'] = '';
                            $orderStatus['status']    = 'Accepted';

                            $message = $OrderDetails['order_number'].' is rejected by '.$driverDetails['driver_name'];

                        }else {
                            $message = $driverDetails['driver_name'].' Strucked in Traffic';
                        }

                        $driverOrderEntity = $this->Orders->newEntity($updateOrder);
                        $this->Orders->save($driverOrderEntity);

                        $orderStatus['id']                = '';

                        $orderStatus['order_id']          = $getData['orderid'];
                        $orderStatus['driver_id']         = $getData['driverid'];
                        $orderStatus['driver_latitude']   = $OrderDetails['destination_latitude'];
                        $orderStatus['driver_longitude']  = $OrderDetails['destination_longitude'];
                        $orderStatusEntity = $this->Orderstatuses->newEntity($orderStatus);
                        $this->Orderstatuses->save($orderStatusEntity);



                        if(strtolower($getData['reason']) == 'traffic') {
                            $customerDevice = $OrderDetails['user']['device_id'];

                            $customerMessage = 'Your Driver Stuck in Traffic';

                            if (!empty($customerDevice)) {


                                $notificationdata['data']['title']          = "orderstatus";
                                $notificationdata['data']['message']        = $customerMessage;
                                $notificationdata['data']['is_background']  = false;
                                $notificationdata['data']['payload']        = array('OrderDetails' => "",'type' => "neworder");
                                $notificationdata['data']['timestamp']      = date('Y-m-d G:i:s');
                                $gcm  = (trim($OrderDetails['user']['device_type']) == 'Android') ?
                                    $this->FcmNotification->sendNotification($notificationdata, $customerDevice) :
                                    $this->IosNotification->notificationIOS($notificationdata['data']['message'], $customerDevice, 'Customer');
                            }
                        }



                        //Push Notification

                        $this->PushNotification->rejectNotification($OrderDetails['order_number']);


                        $this->PushNotification->driverNotification($message, $driverDetails['created_id']);

                        $response['success'] = '1';
                    } else {
                        $response['success'] = 0;
                        $response['message'] = 'Unauthorized';
                    }

                    break;


                case 'DriverLogOut':

                    $driverDetails = $this->Drivers->find('all',[
                        'conditions' => [
                            'Drivers.id' => $getData['driverid'],
                        ],
                    ])->hydrate(false)->first();

                    if (!empty($driverDetails)) {

                        $updateDriver['id'] = $getData['driverid'];
                        $updateDriver['is_logged'] = 0;
                        $updateDriver['driver_status'] = 'Offline';

                        $driverEntity = $this->Drivers->newEntity($updateDriver);
                        $this->Drivers->save($driverEntity);

                        $message = $driverDetails['driver_name']." loggedout";

                        $this->PushNotification->driverNotification($message);

                        $this->PushNotification->driverNotification($message, $driverDetails['created_id']);


                        $response['success'] = '1';
                        $response['message'] = 'Successfully logout ';
                    } else {
                        $response['success'] = '0';
                        $response['message'] = 'Unauthorized';
                    }

                    break;


                case 'changePassword':

                    $driverDetails = $this->Drivers->find('all',[
                        'conditions' => [
                            'Drivers.id' => $getData['driver_id'],
                        ],
                    ])->hydrate(false)->first();

                    if (!empty($driverDetails)) {

                        $updateDriver['id'] = $driverDetails['user_id'];
                        $updateDriver['password'] = $getData['newpassword'];

                        $driverEntity = $this->Users->newEntity($updateDriver);
                        $this->Users->save($driverEntity);

                        $response['success'] = '1';
                        $response['message'] = 'Changed password successfully';
                    } else {
                        $response['success'] = '0';
                        $response['message'] = 'Unauthorized';
                    }


                    break;


                case 'DriverToken':

                    $driverDetails = $this->Drivers->find('all',[
                        'conditions' => [
                            'Drivers.id' => $getData['driverId'],
                        ],
                    ])->hydrate(false)->first();


                    if (!empty($driverDetails)) {

                        $updateDriver['id'] = $getData['driverId'];
                        $updateDriver['device_id'] = $getData['deviceId'];

                        $driverEntity = $this->Drivers->newEntity($updateDriver);
                        $this->Drivers->save($driverEntity);

                        $response['success'] = 1;
                        $response['message'] = 'device token updated';

                    } else {
                        $response['success'] = 0;
                        $response['message'] = 'device token is not change';
                    }
                    break;


                case 'Authorized':

                    $driverDetails = $this->Drivers->find('all',[
                        'conditions' => [
                            'Drivers.id' => $getData['driverId'],
                        ],
                    ])->hydrate(false)->first();

                    if (!empty($driverDetails)) {

                        if ($driverDetails['is_logged'] == 1 &&
                            strtolower($driverDetails['device_name']) == 'ios') {
                            $response['success'] = 1;
                            $response['message'] = 'Authorized Person';
                        } else {
                            $response['success'] = 0;
                            $response['message'] = 'Unauthorized Person';
                        }
                    } else {
                        $response['success'] = 0;
                        $response['message'] = 'Missing driver id';
                    }
                    break;

                case 'billing':
                    $id = $this->request->getData('driver_id');
                    $invoiceDetails = $this->DriverInvoices->find('all', [
                        'conditions' => [
                            'driver_id' => $id
                        ]
                    ])->hydrate(false)->toArray();
                    //pr($invoiceDetails);die();

                    if(!empty($invoiceDetails)) {
                        $response['success'] = 1;
                        $response['invoiceDetails'] = $invoiceDetails;
                    }else {
                        $response['success'] = 0;
                        $response['message'] = 'No Record Found';
                    }
                    break;

                case 'billingDetails':

                    $id = $this->request->getData('id');

                    $invoiceDetails = $this->DriverInvoices->find('all', [
                        'conditions' => [
                            'id' => $id
                        ]
                    ])->hydrate(false)->first();
                    //pr($invoiceDetails);die();

                    $orderDetails = $this->Orders->find('all', [
                        'conditions' => [
                            'driver_invoice_number' => $invoiceDetails['invoice_number']
                        ]

                    ])->hydrate(false)->toArray();

                    if(!empty($orderDetails)) {
                        foreach ($orderDetails as $oKey => $oValue) {
                            if($oValue['payout_type'] == 'distance') {
                                $orderDetails[$oKey]['distance_amount'] = $oValue['payout_amount'] * $oValue['distance'];
                            }else {
                                $orderDetails[$oKey]['distance_amount'] = $oValue['payout_amount'];
                            }
                        }
                    }
                    if(!empty($invoiceDetails)) {
                        $response['success'] = 1;
                        $response['invoiceDetails'] = $invoiceDetails;
                        $response['orderDetails'] = $orderDetails;

                    }else {
                        $response['success'] = 0;
                        $response['message'] = 'No Record Found';
                    }

                    break;

            }
        } else {
            $response = 'access permission denied';
        }

        die(json_encode($response));
    }

    public function DriverSignupMail($data,$id){

        $this->siteSettings = $this->Sitesettings->find('all', [
            'conditions' => [
                'id' => '1'
            ]
        ])->hydrate(false)->first();
        $siteName     = $this->siteSettings['site_name'];

        $newRegisteration = $this->Notifications->find('all', [
            'conditions' => [
                'title'=>'Driver signup'
            ]
        ])->hydrate(false)->first();


        if($newRegisteration){
            $regContent = $newRegisteration['content'];
            $regsubject = $newRegisteration['subject'];
            $regsubject = str_replace("{siteName}", $siteName, $regsubject);
        }
        $adminEmail   = $this->siteSettings['admin_email'];
        $source       = BASE_URL.'images/logo-home.png';
        $mailContent  = $regContent;
        $siteUrl      = ADMIN_BASE_URL.'drivers/edit/'.$id;
        $DriverName   = $data['driver_name'];
        $mobileNumer  = $data['username'];
        $emailAddress = $data['driver_email'];

        $mailContent  = str_replace("{DRIVERNAME}", $DriverName, $mailContent);
        $mailContent  = str_replace("{CONTACT}", $mobileNumer, $mailContent);
        $mailContent  = str_replace("{EMAIL}", $emailAddress, $mailContent);
        $mailContent  = str_replace("{LINK}", $siteUrl, $mailContent);

        $email        = new Email();
        $email->setFrom($data['driver_email']);
        $email->setTo($adminEmail);
        $email->setSubject($regsubject);
        $email->setTemplate('register');
        $email->setEmailFormat('html');
        $email->setViewVars(['mailContent' => $mailContent,
            'source' => $source,
            'storename' => $siteName]);

        $email->send();
        return true;
    }

}
