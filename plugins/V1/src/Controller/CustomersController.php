<?php
/**
 * Created by NagaRaj.V 
 * Date: 20/Jan/18
 * Time: 19:29 PM
 */
namespace V1\Controller;  

use RestApi\Controller\ApiController;
use Cake\Mailer\Email;
use Cake\Auth\DefaultPasswordHasher;
use Cake\Utility\Hash;


class CustomersController extends ApiController{

    public function initialize(){
     	parent::initialize(); // TODO: Change the autogenerated stub
        $http = (isset($_SERVER["HTTPS"])) ? 'https://' : 'http://';
        $this->BaseUrl   = $http.$_SERVER['HTTP_HOST'].'/foodlove/';        
        $this->loadComponent('Common');
        $this->loadComponent('FcmNotification');
        $this->loadComponent('PushNotification');

        $this->loadModel('Users');
        $this->loadModel('Orders');
        $this->loadModel('Cuisines');
        $this->loadModel('Categories');
        $this->loadModel('Restaurants');
        $this->loadModel('RestaurantMenus');
        $this->loadModel('Carts');
        $this->loadModel('StripeCustomers');
        $this->loadModel('AddressBooks');
        $this->loadModel('WalletHistories');
        $this->loadModel('PromotionBanners');
        $this->loadModel('Sitesettings');
        $this->loadModel('Bookings');
        $this->loadModel('Reviews');
        $this->loadModel('Twilio');
        $this->loadModel('CustomerPoints');
        $this->loadModel('Referrals');
        $this->loadModel('Rewards');
        $this->loadModel('Notifications');
        $this->loadModel('Offers');
    }
   //--------------------------------------------------------------------------------------
    public function index(){
    	$this->httpStatusCode = 200;
        $this->apiResponse['you_response'] = 'Invalid option';

        $siteSettings = $this->Sitesettings->find('all', [
            'conditions' => [
                'id' => '1'
            ]
        ])->hydrate(false)->first();

        define('PUSHER_APPID',$siteSettings['pusher_id']);
        define('PUSHER_SECRET',$siteSettings['pusher_secret']);
        define('PUSHER_AUTHKEY',$siteSettings['pusher_key']);
    }
   #-----------------------------------------------------------------------------    
    public function signup(){

    	if($this->request->is(['post','put'])) {

    		$postData = $this->request->getData();

            $walletAmount = 0;
	        $email    = $postData['username'];
	        $fistName = $postData['first_name'];
	        $lastName = $postData['last_name'];
	        $password = $postData['password'];
	        $phone    = $postData['phone_number'];
	        //$deviceType = $postData['device_type'];
	        //$deviceId = $postData['device_id'];

	        if(!empty($email) && !empty($fistName) && !empty($lastName) && !empty($password) && !empty($phone)) {

                $users = $this->Users->find('all',[
                   'fields'=> [
                       'id'
                   ],
                    'conditions' => [
                        'Users.username' => $email,
                        'Users.deleted_status' => 'N'
                    ]
                ])->hydrate(false)->first();
                if(count($users) > 0) {
                    $response['success'] = 0;
                    $response['message'] = 'Email already exists!';
                    $this->apiResponse = $response;
                }else {

                    if($postData['referral_code'] != '') {

                        $checkCode = $this->Users->find('all', [
                            'conditions' => [
                                'referral_code' => $postData['referral_code']
                            ]
                        ])->hydrate(false)->first();

                        if(!empty($checkCode)) {
                            $referrals = $this->Referrals->find('all', [
                                'conditions' => [
                                    'referral_option' => 'Yes'
                                ]
                            ])->hydrate(false)->first();

                            if(!empty($referrals)) {
                                //This wallet Amount to New Customer
                                $walletAmount = $referrals['receive_amount'];

                                //Amount update to referred Customer
                                $updateUser['wallet_amount'] = $checkCode['wallet_amount'] + $referrals['invite_amount'];
                                $userEntity = $this->Users->newEntity();
                                $customerPatch  = $this->Users->patchEntity($userEntity,$updateUser);
                                $customerPatch->id = $checkCode['id'];
                                $saveUsers = $this->Users->save($customerPatch);

                                $walletEntity = $this->WalletHistories->newEntity();
                                $history['customer_id'] = $checkCode['id'];
                                $history['purpose'] = "Referred to ".$this->request->getData('first_name');
                                $history['transaction_type'] = 'Credited';
                                $history['amount'] = $referrals['invite_amount'];
                                $history['transaction_details'] = 'Referral Amount';
                                $walletPatch = $this->WalletHistories->patchEntity($walletEntity,$history);
                                $saveWallet = $this->WalletHistories->save($walletPatch);
                            }
                        }
                    }
                    $postData['role_id']  = 3;
                    $postData['status']  = 1;
                    $postData['wallet_amount'] = $walletAmount;

                    $postData['referred_by'] = (isset($checkCode['id']) ? $checkCode['id'] : '');

                    $firstName = strtoupper($this->request->getData('first_name'));
                    $random = mt_rand(1000, 9999);

                    $postData['referral_code'] = $firstName.''.$random;


                    $userEntity = $this->Users->newEntity($postData);
                    $customerSave = $this->Users->save($userEntity);
                    if($customerSave) {

                        if($walletAmount > 0) {
                            $walletEntity = $this->WalletHistories->newEntity();
                            $history['customer_id'] = $customerSave->id;
                            $history['purpose'] = "Referred By ".$checkCode['first_name']."(".$checkCode['referral_code'].")";
                            $history['transaction_type'] = 'Credited';
                            $history['amount'] = $walletAmount;
                            $history['transaction_details'] = 'Referral Amount';
                            $walletPatch = $this->WalletHistories->patchEntity($walletEntity,$history);
                            $saveWallet = $this->WalletHistories->save($walletPatch);
                        }

                        $response['success'] = 1;
                        $response['message'] = 'Customer registered successfully';
                        $this->apiResponse = $response;
                    } else {
                        $response['success'] = 0;
                        $response['message'] = 'Required fields are missing';
                        $this->apiResponse = $response;
                    }
                }
            } else {
                $response['success'] = 0;
                $response['message'] = 'Required fields are missing';
                $this->apiResponse = $response;
            }
        }else {
            $this->apiResponse = 'access permission denied';
        }
    }

  //---------------------------------------------------------------------------
    public function login(){
         
          //load Model
          $this->loadComponent('Auth');                         

        if($this->request->is(['post','put'])) {
           
            $username   = $this->request->getData(['username']);
            $password   = $this->request->getData(['password']);
            $deviceType = $this->request->getData(['device_type']);
            $deviceId   = $this->request->getData(['device_id']);


            if(!empty($username) && !empty($password)) {
                $user = $this->Auth->identify();
                if(!empty($user) && ($user['role_id'] == 3) && ($user['deleted_status'] == 'N') && ($user['status'] == '1')){                
                    $this->Auth->setUser($user);
                    if($deviceType != '' && $deviceId != '') {
                        $userDet = $this->Users->get($user['id']);
                        $data['device_type'] = $deviceType;
                        $data['device_id'] = $deviceId;
                        $data['id'] = $user['id'];
                        $userEntity = $this->Users->newEntity($data);
                        //$userPatch = $this->Users->patchEntity($userDet,$data);
                        //pr($userEntity);die();
                        $this->Users->save($userEntity);
                    }

                    $customerHistory = $this->Orders->find('all', [
                        'conditions' => [
                            'customer_id' => $user['id']
                        ]
                    ])->count();

                    if($customerHistory == 0) {
                        $response['first_user'] = 'Yes';
                    }else {
                        $response['first_user'] = 'No';
                    }
                    

                    $response['success']    = 1;
                    $response['message']    = 'login successfully';
                    $response['customerId'] = $user['id'];
                    $response['name']       = $user['first_name'].' '.$user['last_name'];
                    $response['firstName']  = $user['first_name'];
                    $response['lastName']   = $user['last_name'];
                    $response['email']      = $user['username'];
                    $response['customerPhone'] = $user['phone_number'];                                    
                    $this->apiResponse = $response;
                }else if(!empty($user) && ($user['role_id'] == 3) && ($user['deleted_status'] == 'N') && ($user['status'] == '0')){ 
                    $response['success'] = 0;
                    $response['message'] = 'Your account deactivated';
                    $this->apiResponse = $response;
                }else if(!empty($user) && ($user['role_id'] == 3) && ($user['deleted_status'] == 'Y')){ 
                    $response['success'] = 0;
                    $response['message'] = 'Your account deleted';
                    $this->apiResponse = $response;
                }else{
                    $response['success'] = 0;
                    $response['message'] = 'Incorrect username and password';
                    $this->apiResponse = $response;
                }
            }else{
                $response['success'] = 0;
                $response['message'] = 'username / password should not be empty';
                $this->apiResponse = $response;
            }   
        }else {
            $this->apiResponse = 'access permission denied';           
        }
    }
 //-----------------------------------------------------------------------------

   public function forgetPassword(){
       
       $siteSettings = $this->Sitesettings->find('all', [
            'conditions' => [
                'id' => '1'
            ]
        ])->hydrate(false)->first();     

        if($this->request->is(['post','put'])) { 

            $email = $this->request->getData(['username']);
            $userData = $this->Users->find('all', [
                   'conditions' =>[
                        'username' => $this->request->getData('username'),                            
                        'role_id' => 3
                   ]
                ])->hydrate(false)->first();                        

            if(!empty($userData) && ($userData['role_id'] == 3) && ($userData['deleted_status'] == 'N') && ($userData['status'] == 1)){
                
                $newRegisteration = $this->Notifications->find('all',[
                            'conditions'=>[
                                'title' => 'Reset password'
                            ]
                    ])->hydrate(false)->first();
                  
                    if($newRegisteration){
                        $forgetpasswordContent = $newRegisteration['content'];
                        $forgetpasswordsubject = $newRegisteration['subject'];
                    }

                    $mailContent = $forgetpasswordContent;
                    $title       = 'logo.png';
                    $adminName   = $this->siteSettings['site_name'];

                    $toemail      = $this->request->getData('username');
                    $customerName = $userData['first_name'].' '.$userData['last_name'];
                    $site_url     = BASE_URL;
                    $source       = BASE_URL.'images/logo-home.png';
                    $adminEmail   = $this->siteSettings['admin_email'];
                    $siteName     = $this->siteSettings['site_name'];
                    $tmpPassword  = $this->Common->passwordGenerator(7);

                    $userID      = $userData['id'];
                    $siteUrl     = BASE_URL.'users/login';
                    $mailContent = str_replace("{Customer name}", $customerName, $mailContent);
                    $mailContent = str_replace("{source}", $source, $mailContent);
                    $mailContent = str_replace("{title}", $title, $mailContent);
                    $mailContent = str_replace("{SITE_URL}", $siteUrl, $mailContent);
                    $mailContent = str_replace("{tmpPassword}", $tmpPassword, $mailContent);
                    $mailContent = str_replace("{Store name}", $adminName, $mailContent);

                    //echo "<pre>"; print_r($mailContent); die();
                    $datas['password'] = $tmpPassword;
                    $datas['id'] = $userData['id'];
                    $userEnty     = $this->Users->newEntity();
                    $userPatch    = $this->Users->patchEntity($userEnty,$datas);

                    if ($this->Users->save($userPatch)){

                        $fromMail = $this->siteSettings['admin_email'];
                        $to = $toemail;
                        $mailSubject = "Forget password";
                        $email = new Email();
                        $email->setFrom([$fromMail => 'Comeneat2.0']);
                        $email->setTo($to);
                        $email->setSubject($mailSubject);
                        $temp=$email->setTemplate('default');
                        $email->setEmailFormat('html');
                        $email->setViewVars([
                            'mailContent' => $mailContent,
                            'title' => $mailSubject ,
                            'password' => $tmpPassword,
                            'customerName' => $customerName,
                            'siteName'    => $siteName,
                            'source'    => $source,
                            'siteUrl'    => $site_url
                        ]);

                        if($email->send()){
                            $response['success'] = 1;
                            $response['message'] = 'Temporary Password sent To your Registered email id.';
                            $this->apiResponse = $response;                            
                        }
                    }       

            }else if(!empty($userData) && ($userData['role_id'] == 3) && ($userData['deleted_status'] == 'N') && ($userData['status'] == 0)){                 
                $response['success'] = 0;
                $response['message'] = 'Your account was deactivated. Please contact Admin';
                $this->apiResponse = $response;
            }else if(!empty($userData) && ($userData['role_id'] == 3) && ($userData['deleted_status'] == 'Y')){               
                $response['success'] = 0;
                $response['message'] = 'Your account was deleted. Please contact Admin';
                $this->apiResponse = $response;
            }else{                 
                $response['success'] = 0;
                $response['message'] = 'You are not register customer';
                $this->apiResponse = $response;
            }
        }else{
            $this->apiResponse = 'access permission denied';
        }    
    }
 //-------------------------------------------------------------------------------
    public function myAccount(){

    	if($this->request->is(['post','put'])) {    

            $postData = $this->request->getData(); 
            $page     = $this->request->getData('page');
            $action   = $this->request->getData('action');
            $customerId = $this->request->getData('customer_id');
            
            $message = '';

            switch ($action) {

                case 'MyAccount':

                 $customerDetails = $this->Users->find('all', [
                      'conditions' => [
                          'role_id' => 3,
                          'id' => $customerId,
                          'deleted_status !=' => 'Y'
                        ]
                    ])->hydrate(false)->first();
                 /*echo "<pre>"; print_r($customerDetails);
                 exit();*/

                 if (is_array($customerDetails) && $customerDetails['role_id'] == 3) {
                    switch (trim($page)) {

                        case 'ReferralList':

                            $userDetails = $this->Users->find('all', [
                                'conditions' => [
                                    'id' => $customerId
                                ]
                            ])->hydrate(false)->first();

                            if($userDetails['referral_code'] == '') {
                                $firstName = strtoupper($userDetails['first_name']);
                                $random = mt_rand(1000, 9999);

                                $updateUser['referral_code'] = $firstName.''.$random;

                                $userEntity = $this->Users->newEntity();
                                $userPatch  = $this->Users->patchEntity($userEntity,$updateUser);
                                $userPatch->id = $userDetails['id'];
                                $saveUsers = $this->Users->save($userPatch);
                            }

                            $customerDetails = $this->Users->find('all', [
                                'conditions' => [
                                    'id' => $customerId
                                ]
                            ])->hydrate(false)->first();

                            //Referral
                            $referrals = $this->Referrals->find('all', [
                                'conditions' => [
                                    'id' => 1,
                                    'referral_option' => 'Yes'
                                ]
                            ])->hydrate(false)->first();

                            if($customerDetails['referral_code'] != '') {
                                $customerDetails['referral_url'] = BASE_URL.'users/signup/'.$customerDetails['referral_code'];
                            }

                            //Get Referred Customer by You
                            $referredList = $this->Users->find('all', [
                                'fields' => [
                                    'first_name',
                                    'last_name',
                                    'username',
                                    'created'
                                ],
                                'conditions' => [
                                    'referred_by' => $customerId
                                ]
                            ])->hydrate(false)->toArray();

                            $response['referrals'] = $referrals;
                            $response['referredList'] = $referredList;
                            $response['customerDetails'] = $customerDetails;
                            $response['success'] = 1;

                            break;

                        case 'OrderList':
                                
                                $orderLists = $this->Orders->find('all',[
                                    'fields' =>[
                                        'order_number',
                                        'id',
                                        'payment_method',
                                        'order_grand_total',
                                        'payment_status',
                                        'status',
                                        'source_latitude',
                                        'source_longitude',
                                        'destination_latitude',
                                        'destination_longitude'
                                    ],
                                    'conditions'  => [
                                        'Orders.customer_id' => $customerId
                                      ],                                                        
                                    'order'  => [
                                       'Orders.id DESC'
                                    ],
                                    'contain' => [
                                        'Reviews'
                                    ]
                                ])->hydrate(false)->toArray();

                                foreach ($orderLists as $key => $value) {

                                    $value['rating'] = (!empty($value['reviews'][0]['rating'])) ?
                                                                $value['reviews'][0]['rating'] : 0;
                                    $orderList[$key] = $value;
                                }                              

                                if (!empty($orderLists)) {
                                    $response['success']    = 1;
                                    $response['orderLists'] = $orderList;
                                } else {
                                    $response['success']    = 0;
                                    $response['message']    = 'No records found';
                                }
                            break;

                        case 'OrderDetail':


                            $orderId      = $this->request->getData('orderId');
                            $orderDetails = $this->Orders->find('all', [
                                'conditions' => [
                                    'Orders.id' => $orderId,
                                    'Orders.customer_id' => $customerId
                                ],
                                'contain' => [
                                    'Restaurants' => [
                                        'fields' => [
                                            'Restaurants.restaurant_name',
                                            'Restaurants.id',
                                            'Restaurants.restaurant_logo',
                                            'Restaurants.contact_address',
                                            'Restaurants.contact_phone',
                                        ]
                                    ],
                                    'Users',
                                    'Carts' => [
                                        'RestaurantMenus',
                                        'sort' => [
                                            'Carts.menu_id' => 'ASC'
                                        ]
                                    ]
                                ]
                            ])->hydrate(false)->first();


                            if($orderDetails['status'] != 'Pending' && $orderDetails['status'] != 'Delivered' && $orderDetails['status'] != 'Failed'){
                                $orderDetails['status'] = 'Accepted';
                            }

                            if (!empty($orderDetails)) {
                                $response['success']    = 1;
                                $response['OrderDetail'] = $orderDetails;
                            } else {
                                $response['success']    = 0;
                                $response['message']    = 'No records found';
                            }
   

                        case 'CustomerDetails':
                                $response['success']        = '1';
                                $response['customerId']     = $customerDetails['id'];
                                $response['firstName']      = $customerDetails['first_name'];
                                $response['lastName']       = $customerDetails['last_name'];
                                $response['email']          = $customerDetails['username'];
                                $response['customerPhone']  = $customerDetails['phone_number'];
                                $response['customerDetails'] = $customerDetails;  
                        break;

                        case 'getStripeCard':
                                $cardDetails = $this->StripeCustomers->find('all', [
                                        'conditions'=>[
                                            'StripeCustomers.customer_id' => $customerId
                                        ]
                                    ])->hydrate(false)->toArray();                            

                                if (!empty($cardDetails)) {
                                    $response['success']    = 1;
                                    $response['cardDetails'] = $cardDetails;
                                } else {
                                    $response['success']    = 0;
                                    $response['message']    = 'No records found';
                                }
                        break;

                        case 'SavedCardDelete':
                                $stripeId   = $this->request->getData('stripeId');
                                $stripeCard = $this->StripeCustomers->find('all',[
                                       'conditions' => [
                                           'StripeCustomers.customer_id' => $customerId,
                                            'StripeCustomers.id' => $stripeId 
                                        ]
                                    ])->hydrate(false)->first();

                                if (!empty($stripeCard)) {

                                    $this->StripeCustomers->deleteAll(['StripCustomers.id' => $stripeId]);

                                    $response['success'] = 1;
                                    $response['message'] = 'Successfully deleted card';
                                } else {
                                    $response['success'] = 0;
                                    $response['message'] = 'Failed';
                                }
                        break;


                        case 'ChangePassword':

                                $oldPassword        = $this->request->getData('oldPassword');
                                $password        = $this->request->getData('password');
                                $currentPassword = $this->request->getData('currentPassword');

                                $userDet = $this->Users->find('all', [
                                    'conditions' => [
                                        'id' => $customerId
                                    ]
                                ])->hydrate(false)->first();

                                if (!empty($password)) {
                                    if ((new DefaultPasswordHasher())->check($oldPassword, $userDet['password'])) {
                                        $custEntity = $this->Users->newEntity();
                                        $custPatch = $this->Users->patchEntity($custEntity, $this->request->getData());
                                        $custPatch->id = $customerId;
                                        $saveCust = $this->Users->save($custPatch);
                                        $response['success'] = 1;
                                        $response['message'] = 'Password successfully changed';
                                    }else {
                                        $response['success'] = 0;
                                        $response['message'] = 'Old password mismatch';
                                    }
                                    
                                } else {
                                    $response['success'] = 0;
                                    $response['message'] = 'Missing Parameters';
                                }
                        break;


                        case 'addMoney':

                            $siteSettings = $this->Sitesettings->find('all', [
                                'conditions' => [
                                    'id' => '1'
                                ]
                            ])->hydrate(false)->first();

                            if($siteSettings['stripe_mode'] == 'Live') {
                                define('STRIPE_SECRET',$siteSettings['stripe_secretkey']);
                                define('STRIPE_PUBLISH',$siteSettings['stripe_publishkey']);
                            }else {
                                define('STRIPE_SECRET',$siteSettings['stripe_secretkeyTest']);
                                define('STRIPE_PUBLISH',$siteSettings['stripe_publishkeyTest']);
                            }

                            if($this->request->getData('amount') != '' && $this->request->getData('cardId') != '') {

                                //pr($this->Auth->user());die();
                                require_once(ROOT . DS . 'vendor' . DS . 'stripe' . DS . 'init.php');

                                \Stripe\Stripe::setApiKey(STRIPE_SECRET);

                                $cardDetails = $this->StripeCustomers->find('all', [
                                    'conditions' => [
                                        'id' => $this->request->getData('cardId')
                                    ]
                                ])->hydrate(false)->first();

                                $siteSettings = $this->Sitesettings->find('all', [
                                    'conditions' => [
                                        'id' => '1'
                                    ]
                                ])->hydrate(false)->first();

                                // Token is created using Checkout or Elements!
                                // Get the payment token ID submitted by the form:
                                //$token = $_POST['stripeToken'];
                                $payAmt = $this->request->getData('amount')*100;



                                // Charge the user's card:
                                if($cardDetails['stripe_customer_id'] == '') {

                                    // Create a Customer:
                                    $customer = \Stripe\Customer::create(array(
                                        "email" => $customerId,
                                        "source" => $cardDetails['stripe_token_id'],
                                    ));

                                    // Charge the Customer instead of the card:
                                    $charge = \Stripe\Charge::create(array(
                                        "amount" => $payAmt,
                                        "currency" => "usd",
                                        "customer" => $customer->id,
                                        "description" => "Load Amount"
                                    ));
                                    //Save Stripe's Customer Details in Table
                                    $cardEntity = $this->StripeCustomers->newEntity();
                                    $cardInsert['stripe_customer_id'] = $customer->id;
                                    $cardPatch = $this->StripeCustomers->patchEntity($cardEntity,$cardInsert);
                                    $cardPatch->id = $this->request->getData('cardId');
                                    $saveCard = $this->StripeCustomers->save($cardPatch);

                                }else {
                                    $charge = \Stripe\Charge::create(array(
                                        "amount" => $payAmt, // amount in cents, again
                                        "currency" => "usd",
                                        "customer" => $cardDetails['stripe_customer_id'],
                                        "description" => "Load Amount"
                                    ));
                                }

                                $walletEntity = $this->WalletHistories->newEntity();
                                $history['customer_id'] = $customerId;
                                $history['purpose'] = "Load Amount";
                                $history['transaction_type'] = 'Credited';
                                $history['amount'] = $this->request->getData('amount');
                                $history['transaction_details'] = 'Myaccount';
                                $walletPatch = $this->WalletHistories->patchEntity($walletEntity,$history);
                                $saveWallet = $this->WalletHistories->save($walletPatch);
                                if($saveWallet) {
                                    $userDetails = $this->Users->find('all', [
                                        'conditions' => [
                                            'id' => $customerId
                                        ]
                                    ])->hydrate(false)->first();

                                    $totalAmount = $this->request->getData('amount') + $userDetails['wallet_amount'];
                                    $custEntity = $this->Users->newEntity();
                                    $amount['wallet_amount'] = $totalAmount ;
                                    $custPatch = $this->Users->patchEntity($custEntity,$amount);
                                    $custPatch->id = $customerId;
                                    $saveCust = $this->Users->save($custPatch);
                                    if($saveCust) {
                                        $response['success'] = 1;
                                        $response['message'] = 'Amount Loaded Successful';
                                    }else {
                                        $response['success'] = 0;
                                        $response['message'] = 'Error Occured';
                                    }
                                }
                            }                            
                        break;

                        case "addCard":

                            $siteSettings = $this->Sitesettings->find('all', [
                                'conditions' => [
                                    'id' => '1'
                                ]
                            ])->hydrate(false)->first();

                            if($siteSettings['stripe_mode'] == 'Live') {
                                define('STRIPE_SECRET',$siteSettings['stripe_secretkey']);
                                define('STRIPE_PUBLISH',$siteSettings['stripe_publishkey']);
                            }else {
                                define('STRIPE_SECRET',$siteSettings['stripe_secretkeyTest']);
                                define('STRIPE_PUBLISH',$siteSettings['stripe_publishkeyTest']);
                            }

                            require_once(ROOT . DS . 'vendor' . DS . 'stripe' . DS . 'init.php');

                            \Stripe\Stripe::setApiKey(STRIPE_SECRET);
                            

                            $custEntity = $this->StripeCustomers->newEntity();
                            $custPatch = $this->StripeCustomers->patchEntity($custEntity,$this->request->getData());
                            $custPatch->customer_id = $customerId;
                            $custPatch->customer_name = $customerDetails['first_name'];

                            $customerDetails = $this->Users->find('all', [
                                'conditions' => [
                                    'id' => $customerId
                                ]
                            ])->hydrate(false)->first();


                            $customer = \Stripe\Customer::create(array(
                                "email" => $customerDetails['username'],
                                "source" => $this->request->getData('stripe_token_id'),
                            ));
                            $stripeDetails['stripe_customer_id'] = $customer->id;

                            $custPatch->stripe_customer_id = $customer->id;

                            $saveCust = $this->StripeCustomers->save($custPatch);
                            

                            if($saveCust) {
                                $response['success'] = 1;
                                $response['message'] = 'Card added successful';
                            }else {
                                $response['success'] = 0;
                                $response['message'] = 'Error Occured';
                            }

                        break;

                        case 'AddressBookList':

                            if (!empty($this->request->getData('view')) && 
                                $this->request->getData('view') == 'checkout') {
                               
                                $addressBook = $this->AddressBooks->find('all',[
                                   'conditions' =>[
                                        'AddressBooks.status' =>1,
                                        'AddressBooks.delete_status' =>'N',
                                        'AddressBooks.user_id' => $customerId
                                   ]
                                 ])->hydrate(false)->toArray();

                            } else {
                                $addressBook = $this->AddressBooks->find('all',[
                                   'conditions' =>[                                        
                                        'AddressBooks.delete_status' =>'N',
                                        'AddressBooks.user_id' => $customerId
                                   ]
                                 ])->hydrate(false)->toArray();
                            }
                            
                            if (!empty($addressBook)) {
                                $response['success']      = 1;
                                $response['addressBook']  =  $addressBook;
                            } else {
                                $response['success']      = 0;
                                $response['message']      = 'No records found';
                            }
                        break;

                        case 'AddressBookAdd':

                            $addressCount = $this->AddressBooks->find('all', [
                                'conditions' => [
                                    'title' => $postData['title'],
                                    'user_id' => $customerId
                                ]
                            ])->count();

                            if($addressCount == 0) {

                                $prepAddr = str_replace(' ','+',$this->request->getData('address'));

                                $url = "https://maps.google.com/maps/api/geocode/json?address=$prepAddr&key=AIzaSyAql4yBAyykHUGfXRicgL5_1YH9-ZeWk3s&sensor=false&region=India";
                                $ch = curl_init();
                                curl_setopt($ch, CURLOPT_URL, $url);
                                curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
                                curl_setopt($ch, CURLOPT_PROXYPORT, 3128);
                                curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);
                                curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
                                $resp = curl_exec($ch);
                                curl_close($ch);
                                $response_a = json_decode($resp);


                                $sourcelatitude = $response_a->results[0]->geometry->location->lat;
                                $sourcelongitude = $response_a->results[0]->geometry->location->lng;

                                if($sourcelatitude != '' && $sourcelongitude != '') {


                                    $addressEntity = $this->AddressBooks->newEntity();
                                    $addressPatch = $this->AddressBooks->patchEntity($addressEntity,$this->request->getData());
                                    $addressPatch->user_id = $customerId;
                                    $addressPatch->status = '1';
                                    $addressPatch->latitude = $sourcelatitude;
                                    $addressPatch->longitude = $sourcelongitude;
                                    $addressSave = $this->AddressBooks->save($addressPatch);
                                    if($addressSave) {
                                        $response['success']  = 1;
                                        $response['message']  = 'Address added successful';
                                    }
                                }

                            }else{
                                $response['success']  = 0;
                                $response['message']  = 'Address Book Already Exists';
                            }

                        break;                       

                        case 'ProfileUpdate':

                               $profile = [];
                               $profile['id'] = $customerId ;
                               $profile['first_name'] = $postData['first_name'];
                               $profile['last_name']  =  $postData['last_name'];
                               $profile['phone_number'] =  $postData['phone'];
                               $userPatch = $this->Users->newEntity($profile);
                               $this->Users->save($userPatch); 

                               $response['success']  = 1;
                               $response['message']  = 'Your detail has been updated';
                        break;

                        case 'AddressBook':

                           $addressBookId = $postData['addressBookId'];
                           $addressBook   = $this->AddressBooks->find('all',[
                                                'conditions'  => [
                                                    'AddressBooks.id' => $addressBookId,
                                                    'AddressBooks.user_id' => $customerId
                                                 ]       
                                            ])->hydrate(false)->first();

                           switch (trim($postData['addressAction'])) {

                                case 'AddressBookDetails':                                      
                                    if (!empty($addressBook)) {
                                        $response['success']             = 1;
                                        $response['addressBookDetails']  = $addressBook;
                                    } else {
                                        $response['success'] = 0;
                                        $response['message'] = 'Failed';
                                    }
                                break;

                                case 'AddressBookEdit':


                                   $addressTitle = $postData['title'];

                                   $addressBook  = $this->AddressBooks->find('all',[
                                              'conditions'  => [                                                    
                                                'AddressBooks.title' => $addressTitle,
                                                'AddressBooks.user_id' => $customerId,
                                                 'AddressBooks.delete_status' =>'N',
                                                'NOT' => [
                                                    'AddressBooks.id' => $addressBookId,
                                                ]
                                             ]       
                                    ])->hydrate(false)->first();


                                   if(!empty($addressBook)) {
                                        $response['success']  = 0;
                                        $response['message']  = 'Address Book Already Exists';
                                    } else {
                                       //$sourcelatitude = $sourcelongitude = 5;
                                        //$prepAddr =  $postData['address'];
                                       $prepAddr = str_replace(' ','+',$postData['address']);
                                        $url = "https://maps.google.com/maps/api/geocode/json?address=$prepAddr&key=AIzaSyAql4yBAyykHUGfXRicgL5_1YH9-ZeWk3s&sensor=false&region=India";
                                        $ch = curl_init();
                                        curl_setopt($ch, CURLOPT_URL, $url);
                                        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
                                        curl_setopt($ch, CURLOPT_PROXYPORT, 3128);
                                        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);
                                        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
                                        $resp = curl_exec($ch);
                                        curl_close($ch);
                                        $response_a = json_decode($resp);

                                        $sourcelatitude = $response_a->results[0]->geometry->location->lat;
                                        $sourcelongitude = $response_a->results[0]->geometry->location->lng;



                                        if($sourcelatitude != '' && $sourcelongitude != '') {
                                            $addAddress = [];
                                            $addAddress['id'] = $addressBookId;
                                            $addAddress['user_id'] = $customerId;
                                            $addAddress['title']   = $postData['title'];
                                            $addAddress['flat_no'] = $postData['flat_no'];  
                                            $addAddress['address'] = $postData['address'];     
                                            $addAddress['status']  = '1';
                                            $addAddress['latitude']= $sourcelatitude;
                                            $addAddress['longitude']= $sourcelongitude;

                                            $addressEntity = $this->AddressBooks->newEntity($addAddress); 
                                            $addressSave   = $this->AddressBooks->save($addressEntity);

                                            $response['success']  = 1;
                                            $response['message']  = 'Your CustomerAddressBook has been updated';

                                        }
                                    }
                                break;      

                                case 'AddressBookStatus':

                                    if (!empty($addressBook)) {
                                          $status = [];
                                        if ($postData['status'] == 1) {
                                            $status['id'] = $addressBookId;
                                            $status['user_id'] =$customerId;
                                            $status['status'] = 0;
                                        } else {
                                            $status['id'] = $addressBookId;
                                            $status['user_id'] =$customerId;
                                            $status['status'] = 1;
                                        }

                                         $statusEntity = $this->AddressBooks->newEntity($status); 
                                         $statusSave   = $this->AddressBooks->save($statusEntity);
                                        
                                        $response['success']  = 1;
                                        $response['message']  = 'Successfully status changed';
                                    } else {
                                        $response['success']  = 0;
                                        $response['message']  = 'Failed';
                                    }
                                break;  

                                case 'AddressBookDelete':

                                    if (!empty($addressBook)) {

                                        $deletAdd = [];
                                        $deletAdd['id'] = $addressBookId;
                                        $deletAdd['user_id'] = $customerId;
                                        $deletAdd['delete_status'] = 'Y';
                                        $deletEntity = $this->AddressBooks->newEntity($deletAdd); 
                                        $deletSave   = $this->AddressBooks->save($deletEntity);
                                       
                                        $response['success']  = 1;
                                        $response['message']  = 'Successfully deleted addressbook';
                                    } else {
                                        $response['success']  = 0;
                                        $response['message']  = 'Failed';
                                    }
                                break;

                           }
                        break ;

                        case 'MyWallet':

                            $walletHistory = $this->WalletHistories->find('all', [
                                'conditions' => [
                                    'customer_id' => $customerId
                                ],
                                'order' => [
                                    'id' => 'DESC'
                                ]
                            ])->hydrate(false)->toArray();
                            
                            foreach ($walletHistory as $kw => $vw) {
                                $walletHistory[$kw]['created'] = date('Y/m/d h:i',strtotime($vw['created']));
                            }

                            $walletAmount = $this->Users->find('all', [
                                'conditions' => [
                                    'id' => $customerId
                                ]
                            ])->hydrate(false)->first();

                            $response['success'] = 1;
                            $response['walletHistory'] = $walletHistory;
                            $response['walletAmount'] = $walletAmount['wallet_amount'];

                        break;


                        case 'MyWalletAddMoney':

                            $amount       = $postData['amount'];
                            $stripeCardId = $postData['card_id'];

                            $siteSettings = $this->Sitesettings->find('all', [
                                'conditions' => [
                                    'id' => '1'
                                ]
                            ])->hydrate(false)->first();

                            if($siteSettings['stripe_mode'] == 'Live') {
                                define('STRIPE_SECRET',$siteSettings['stripe_secretkey']);
                                define('STRIPE_PUBLISH',$siteSettings['stripe_publishkey']);
                            }else {
                                define('STRIPE_SECRET',$siteSettings['stripe_secretkeyTest']);
                                define('STRIPE_PUBLISH',$siteSettings['stripe_publishkeyTest']);
                            }

                            require_once(ROOT . DS . 'vendor' . DS . 'stripe' . DS . 'init.php');

                            \Stripe\Stripe::setApiKey(STRIPE_SECRET);

                            if (empty($stripeCardId)) {

                                $saveOrNot  = $postData['saveCard'];
                                $cardNumber = $postData['stripe_cardnumber'];
                                $stripe['exp_year']         = $postData['stripe_expyear'];
                                $stripe['exp_month']        = $postData['stripe_expmonth'];
                                $stripe['customer_id']      = $customerId;
                                $stripe['card_number']      = $postData['stripe_cardnumber'];
                                $stripe['customer_name']    = $postData['cardHolderName'];
                                $stripe['stripe_token_id']  = $stripeToken = $postData['stripe_token'];

                                $customerDetails = $this->Users->find('all', [
                                    'conditions' => [
                                        'id' => $customerId
                                    ]
                                ])->hydrate(false)->first();

                                // Create a Customer:
                                $customer = \Stripe\Customer::create(array(
                                    "email" => $customerDetails['username'],
                                    "source" => $stripeToken,
                                ));

                                //pr($customer);
                                //echo $customer->id;
                               // pr($stripe); die();

                                $stripId  = $stripe['stripe_customer_id'] = $customer->id;

                                if ($saveOrNot == 'Yes') {

                                    $stripePatch = $this->StripeCustomers->newEntity($stripe);
                                    $stripeCustomer = $this->StripeCustomers->save($stripePatch);
                                    $stripeCardId = $stripeCustomer->id;
                                }

                            } else {

                                $stripeCard = $this->StripeCustomers->find('all', [
                                    'conditions' => [
                                        'StripeCustomers.id' => $stripeCardId,
                                        'StripeCustomers.customer_id' => $customerId
                                    ]
                                ])->hydrate(false)->first();

                                $customerDetails = $this->Users->find('all', [
                                    'conditions' => [
                                        'id' => $customerId
                                    ]
                                ])->hydrate(false)->first();


                                if (empty($stripeCard['stripe_customer_id'])) {

                                    // Create a Customer:
                                    $customer = \Stripe\Customer::create(array(
                                        "email" => $customerDetails['username'],
                                        "source" => $stripeCard['stripe_token_id']
                                    ));
                                    

                                    $stripId  = $stripeCard['stripe_customer_id'] = $customer['stripe_id'];

                                    $stripePatch = $this->StripeCustomers->newEntity($stripeCard);
                                    $stripePatch->id = $stripeCard['id'];
                                    $this->StripeCustomers->save($stripePatch);

                                } else {
                                    $stripId = $stripeCard['stripe_customer_id'];
                                }
                            }

                            //echo $payAmt;die();
                            // Charge the Customer instead of the card:
                            $stripeResponse = \Stripe\Charge::create(array(
                                "amount" => $amount*100,
                                "currency" => "usd",
                                "customer" => $stripId,
                                "description" => "Load Amount"
                            ));

                            if ($stripeResponse['status'] == "succeeded" && $stripeResponse['id'] != '') {

                                // Wallet Amount Added
                                $customerWallet['id'] = $customerId;
                                $customerWallet['wallet_amount'] = $customerDetails['wallet_amount'] + $amount;

                                $customerWalletPatch = $this->Users->newEntity($customerWallet);
                                $this->Users->save($customerWalletPatch);

                                // Wallet History
                                $walletHistory['amount']              = $amount;
                                $walletHistory['purpose']             = 'Money added in wallet';
                                $walletHistory['customer_id']         = $customerId;
                                $walletHistory['transaction_details'] = $stripeResponse['id'];

                                $walletHistoryPatch = $this->WalletHistories->newEntity($walletHistory);
                                $this->WalletHistories->save($walletHistoryPatch);

                                $response['success']  = 1;
                                $response['message']  = 'Successfully added amount in your wallet';

                            } else {
                                $response['success']  = 0;
                                $response['message']  = 'Some technical problem. Please try again!';
                            }
                            break;


                        case 'BookingHistory':
                            $bookings = $this->Bookings->find('all', [
                                'conditions' => [
                                    'Bookings.customer_id' => $customerId
                                ],

                                'contain' => [
                                    'Restaurants' => [
                                        'fields' => [
                                            'Restaurants.id',
                                            'Restaurants.restaurant_name',
                                        ]
                                    ]
                                ],
                                 'order' => [
                                     'Bookings.id' => 'DESC'
                                ]
                            ])->hydrate(false)->toArray();

                            foreach ($bookings as $key => $value) {
                                $value['store_name'] = $value['restaurant']['restaurant_name'];
                                $bookingDetails[]   = $value;
                            }

                            if(!empty($bookings)) {
                                $response['success'] = '1';
                                $response['bookings'] = $bookingDetails;
                            } else {
                                $response['success'] = '0';
                                $response['message'] = 'No records found';
                            }
                        break;

                        case 'OrderReview':
                            $postData = $this->request->getData();

                                $orderInfo = $this->Orders->find('all', [
                                    'conditions' => [
                                        'Orders.id' => $postData['order_id'],
                                        'Orders.customer_id' => $customerId,
                                        'Orders.status' => 'Delivered'
                                    ],
                                    'contain' => [
                                        'Reviews'
                                    ]
                                ])->hydrate(false)->first();

                                if (!empty($orderInfo)) {
                                    if (empty($orderInfo['reviews'])) { 
                                        $reviewAdded['rating']      = $postData['rating'];
                                        $reviewAdded['message']     = $postData['message'];
                                        
                                        $reviewAdded['order_id']    = $postData['order_id'];
                                        $reviewAdded['customer_id'] = $customerId;
                                        $reviewAdded['restaurant_id']    = $orderInfo['restaurant_id'];
                                        
                                        $reviewEntity = $this->Reviews->newEntity($reviewAdded);
                                        $this->Reviews->save($reviewEntity);

                                        $response['success']  = 1;
                                        $response['message']  = 'Thank you for your review';
                                    } else {
                                        $response['success']  = 0;
                                        $response['message']  = 'Review Already Exsits';
                                    }
                                } else {
                                    $response['success']  = 0;
                                    $response['message']  = 'Unauthorized access';
                                }
                            break;


                    }
                 }else{
                     $response['success']  = 0;
                     $response['message']  = 'Unknown customer';
                 }                      
                break;              

                default:
                	$response['success'] = 0;
                    $response['message'] = json_encode($this->request->getData());//'Invalid option';
    		}
    		$this->apiResponse = $response;
    	} 
    }
 //--------------------------------------------------------------------------------
    public function searches(){

        if($this->request->getData('searchLocation') != '' ||
            ($this->request->getData('city_id') != '' && $this->request->getData('location_id') != '')){

            $siteSettings = $this->Sitesettings->find('all', [
                'conditions' => [
                    'id' => '1'
                ]
            ])->hydrate(false)->first();


            $prepAddr = str_replace(' ','+',$this->request->getData('searchLocation'));

            $url = "https://maps.google.com/maps/api/geocode/json?address=$prepAddr&key=AIzaSyAql4yBAyykHUGfXRicgL5_1YH9-ZeWk3s&sensor=false&region=India";
            $ch = curl_init();
            curl_setopt($ch, CURLOPT_URL, $url);
            curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
            curl_setopt($ch, CURLOPT_PROXYPORT, 3128);
            curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);
            curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
            $resp = curl_exec($ch);
            curl_close($ch);
            $response_a = json_decode($resp);
            //pr($response_a);die();

            $sourcelatitude = $response_a->results[0]->geometry->location->lat;
            $sourcelongitude = $response_a->results[0]->geometry->location->lng;

            if($sourcelatitude != '' && $sourcelongitude != '') {
                $restaurantList = $this->Restaurants->find('all', [
                    'conditions' => [
                        'OR' => [
                            'restaurant_pickup' => 'Yes',
                            'restaurant_delivery' => 'Yes'
                        ],
                        'id IS NOT NULL',
                        'status' => '1',
                        'delete_status' => 'N'
                    ],
                    'contain' => [
                        'RestaurantMenus' => [
                            'Categories' => [
                                'conditions' => [
                                    'Categories.status' => '1',
                                    'Categories.delete_status' => 'N',
                                ]
                            ]
                        ],
                        'Reviews' =>[
                            'conditions' => [
                                'status' => 1
                            ]
                        ],
                        'Offers' => [
                            'conditions' => [
                                'Offers.status' => 1
                            ],
                            'sort' => [
                                'Offers.id' => 'DESC'
                            ]
                        ],
                        'Promotions',
                        'RestaurantPayments'
                    ]
                ])->hydrate(false)->toArray();
            }
            //pr($restaurantList);die();

            $customerHistory = $this->Orders->find('all', [
                'conditions' => [
                    'customer_id' => $this->request->getData('customer_id')
                ]
            ])->hydrate(false)->first();

            if($customerHistory == 0) {
                $firstUser = 'Yes';
            }else {
                $firstUser = 'No';
            }

            if(!empty($restaurantList)) {

                $currentTime = strtotime(date('h:i A'));
                $currentDay = strtolower(date('l'));

                $final = [];
                $distance = [];
                $result = [];
                $allCuisinesList = [];
                $allCuisinesLists = [];
                $sideCuisines = [];
                $pickupCount = 0;
                $deliveryCount = 0;
                $offerCount = 0;
                $promotionList = [];

                //Reward
                $rewardPoint = $this->Rewards->find('all', [
                    'conditions' => [
                        'id' => 1,
                        'reward_option' => 'Yes'
                    ]
                ])->hydrate(false)->first();

                foreach($restaurantList as $key => $value) {
                    $categoryCount = 0;

                    if(!empty($value['restaurant_menus']) && !empty($value['restaurant_payments'])) {

                        foreach($value['restaurant_menus'] as $rmKey => $rmValue) {
                            if(!empty($rmValue['category'])) {
                                $categoryCount = 1;
                                break;
                            }
                        }
                       
                        if(!empty($value['logo_name'])){
                            //$value['restaurant_logo'] = REST_LOGO.'/'.$value['id'].'/storeLogo/'.$value['logo_name'];
                            $value['restaurant_logo'] = BASE_URL.'uploads/storeLogos/'.$value['logo_name'];
                             //$value['restaurant_logo'] = DRIVERS_LOGO_URL.'/uploads/storeImages/'.$value['id'].'/storeLogo/'.$value['logo_name'];
                        }else{
                            $value['restaurant_logo'] = '';
                        }                       

                        if($categoryCount == 1) {

                            $message = '';
                            $latitudeTo = $value['sourcelatitude'];
                            $longitudeTo = $value['sourcelongitude'];
                            $unit = 'K';
                            $distance = $this->Common->getDistanceValue($sourcelatitude, $sourcelongitude, $latitudeTo, $longitudeTo,
                                $unit);

                            $distance = str_replace(',', '', $distance);

                            list($deliveryCharge, $message) = $this->getDeliveryCharge($value['id'], $distance, $sourcelatitude, $sourcelongitude);
                            $value['to_distance'] = $distance;

                            if ($message == 'success') {

                                $restaurantCuisine = explode(',',$value['restaurant_cuisine']);

                                $cuisineList = '';
                                //$cuisines = '';
                                if(!empty($restaurantCuisine)) {
                                    foreach ($restaurantCuisine as $ckey => $cvalue) {
                                        $cuisines = $this->Cuisines->find('all', [
                                            'conditions' => [
                                                'id' => $cvalue,
                                                'delete_status' => 'N'
                                            ]
                                        ])->hydrate(false)->first();

                                        if(!empty($cuisines)) {
                                            $cuisineList[] = $cuisines['cuisine_name'];
                                            if(!in_array($cvalue,$allCuisinesList)) {

                                                $allCuisinesList[] = $cvalue;
                                                if(empty($sideCuisines[$cuisines['cuisine_name']])) {
                                                    $sideCuisines[$cuisines['cuisine_name']] = 1;
                                                }else {
                                                    $sideCuisines[$cuisines['cuisine_name']]++;
                                                }


                                                //echo $cuisines['cuisine_name'];die();
                                                $allCuisinesLists[$cvalue]['id'] = $cuisines['id'];
                                                $allCuisinesLists[$cvalue]['name'] = $cuisines['cuisine_name'];

                                            }else {
                                                if(empty($sideCuisines[$cuisines['cuisine_name']])) {
                                                    $sideCuisines[$cuisines['cuisine_name']] = 1;
                                                }else {
                                                    $sideCuisines[$cuisines['cuisine_name']]++;
                                                }
                                            }
                                        }
                                    }
                                }

                                $value['cuisineLists'] = implode(', ',$cuisineList);

                                //Set Delivery Charge AMount
                                $value['delivery_charge'] = $deliveryCharge;


                                $firstOpenTime = strtotime($value[$currentDay.'_first_opentime']);
                                $firstCloseTime = strtotime($value[$currentDay.'_first_closetime']);

                                $secondOpenTime = strtotime($value[$currentDay.'_second_opentime']);
                                $secondCloseTime = strtotime($value[$currentDay.'_second_closetime']);

                                //Get Pickup Count
                                if($value['restaurant_pickup'] == 'Yes') {
                                    $pickupCount++;
                                }

                                if($value['restaurant_delivery'] == 'Yes') {
                                    $deliveryCount++;
                                }


                                $currentDate = strtotime(date('Y-m-d'));

                                if(!empty($value['offers'])) {

                                    foreach ($value['offers'] as $oKey => $oValue) {
                                        $startDate = date('Y-m-d',strtotime($oValue['offer_from']));
                                        $toDate = date('Y-m-d',strtotime($oValue['offer_to']));

                                        if($currentDate >= strtotime($startDate) && $currentDate <= strtotime($toDate)) {
                                            $offerCount++;
                                            $value['restOffers'][] = $oValue;
                                            break;
                                        }else {
                                            $value['restOffers'] = [];
                                            //unset($value['offers'][$oKey]);
                                        }
                                    }

                                }else {
                                    $value['restOffers'] = [];
                                }


                                //echo "<pre>";print_r($value['promotions']);die();
                                if(!empty($value['promotions'])) {
                                    foreach ($value['promotions'] as $pKey => $pValue) {
                                        if($pValue['promo_image'] != '') {
                                            $value['promotions'][$pKey]['promo_image'] = DRIVERS_LOGO_URL.'/uploads/storeBanners/'.$pValue['promo_image'];
                                            $value['promotions'][$pKey]['promo_image_url'] = DRIVERS_LOGO_URL.'/uploads/storeBanners/'.$pValue['promo_image'];
                                            $value['promotions'][$pKey]['id'] = $pValue['id'];
                                            $value['promotions'][$pKey]['cuisineList'] = $value['cuisineLists'];
                                            $value['promotions'][$pKey]['to_distance'] = $value['to_distance'];
                                            $value['promotions'][$pKey]['delivery_charge'] = $value['delivery_charge'];
                                            $value['promotions'][$pKey]['restaurant_id'] = $value['id'];


                                            $promotions[$key]['promo_image'] = $pValue['promo_image_url'];
                                            $promotions[$key]['id'] = $pValue['id'];
                                            $promotions[$key]['restaurant_id'] = $value['id'];

                                            $promotionList1[] = array_values($value['promotions']);

                                        }else {
                                            $promotions = [];
                                        }


                                    }
                                    if(!empty($promotions)) {
                                        $promotionList = array_values($promotions);
                                    }else {
                                        $promotions = [];
                                    }

                                }else {
                                    $promotions = [];
                                }


                                if(!empty($value['reviews'])) {
                                    $reviewCount = 0;
                                    $value['totalRating'] = count($value['reviews']);
                                    foreach($value['reviews'] as $rKey => $rValue) {
                                        $reviewCount  = $rValue['rating'] + $reviewCount;
                                    }

                                    $value['finalReview'] = ($reviewCount/$value['totalRating']);
                                }else {
                                    $value['totalRating'] = 0;
                                    $value['finalReview'] = 0;
                                }

                                /* if(!empty($value['promotions'])) {
                                     $promotions = $value['promotions'];
                                 }*/

                                if(!empty($rewardPoint) && $value['reward_option'] == 'Yes') {
                                    $value['reward_option'] = 'Yes';
                                } else {
                                    $value['reward_option'] = 'No';
                                }


                                if($value[$currentDay.'_status'] != 'Close') {
                                    if ($currentTime > $firstOpenTime && $currentTime <= $firstCloseTime) {
                                        $value['openclose'] = 0;
                                        $value['currentStatus'] = 'Open';
                                        $final[] = $value;
                                    } else if ($currentTime > $secondOpenTime && $currentTime <= $secondCloseTime) {
                                        $value['currentStatus'] = 'Open';
                                        $value['openclose'] = 0;
                                        $final[] = $value;
                                    } else if ($currentTime > $firstCloseTime && $currentTime <= $secondOpenTime) {
                                        $value['currentStatus'] = 'PreOrder';
                                        $value['openclose'] = 1;
                                        $final[] = $value;
                                    } else {
                                        $value['currentStatus'] = 'Closed';
                                        $value['openclose'] = 2;
                                        $final[] = $value;
                                    }
                                }else {
                                    $value['currentStatus'] = 'Closed';
                                    $value['openclose'] = 2;
                                    $final[] = $value;
                                }
                            }
                        }
                    }
                }

                if(!empty($final)) {
                    $result = Hash::sort($final, '{n}.to_distance', 'asc');
                    $result = Hash::sort($result, '{n}.openclose', 'asc');
                }

                $allCuisinesLists = array_values($allCuisinesLists);

                //Get Banner Section:
                $bannerLists = $this->PromotionBanners->find('all', [
                    'conditions' => [
                        'banner_image !=' => ''
                    ]
                ])->hydrate(false)->toArray();

                $siteSettings = $this->Sitesettings->find('all', [
                    'conditions' => [
                        'id' => '1'
                    ]
                ])->hydrate(false)->first();

                if(empty($bannerLists)) {
                    $bannerLists = [];
                }

                if(empty($promotionList)) {
                    $promotionList = [];
                }

                $promoList = [];
                if(!empty($promotionList1)) {
                    foreach($promotionList1 as $pKey => $pVal) {
                        $promoList[] = $pVal[0];
                    }
                }

                if(!empty($result)) {
                    $response['restaurantLists'] = $result;
                    $response['allCuisinesLists'] = $allCuisinesLists;
                    $response['currentDay'] = $currentDay;
                    $response['bannerLists'] = $bannerLists;
                    $response['sideCuisines'] = $sideCuisines;
                    $response['pickupCount'] = $pickupCount;
                    $response['deliveryCount'] = $deliveryCount;
                    $response['siteSettings'] = $siteSettings;
                    $response['firstUser'] = $firstUser;
                    $response['promotions'] = $promotionList;
                    $response['promotions1'] = $promoList;
                    $response['success'] = 1;
                }else {
                    $response['success'] = 0;
                    $response['message'] = 'There is no results';
                    $response['siteSettings'] = $siteSettings;
                    $response['firstUser'] = $firstUser;
                }
            }  else {
                $response['success'] = 0;
                $response['message'] = 'There is no results';
                $response['siteSettings'] = $siteSettings;
                $response['firstUser'] = $firstUser;
                $this->apiResponse = $response;
            }
            $this->apiResponse = $response;
        }
    }
//-----------------------------------------------------------------------------------
    public function menuDetails() {

        $restDetails = [];

        $restDetails = $this->Restaurants->find('all', [
            'conditions' => [
                'id' => $this->request->getData('resId')
            ],
            'contain' => [
                'RestaurantMenus' => [
                    'conditions' => [
                        'RestaurantMenus.status' => 1
                    ],
                    'MenuDetails',
                    'sort' => [
                        'RestaurantMenus.category_id' => 'ASC'
                    ]
                ],
                'Reviews' =>[
                    'conditions' => [
                        'Reviews.status' => 1
                    ],
                    'Users' => [
                        'fields' => [
                            'first_name',
                            'last_name'
                        ]
                    ]
                ],
                'Offers' => [
                    'conditions' => [
                        'Offers.status' => 1
                    ],
                    'sort' => [
                        'Offers.id' => 'DESC'
                    ]
                ],
                'RestaurantPayments' => [
                    'conditions' => [
                        'RestaurantPayments.payment_status' => 'Y'
                    ],
                    'PaymentMethods'
                ]
            ]
        ])->hydrate(false)->first();
        //echo "<pre>"; print_r($restDetails); die;

        //Reward
        $rewardPoint = $this->Rewards->find('all', [
            'conditions' => [
                'id' => 1,
                'reward_option' => 'Yes'
            ]
        ])->hydrate(false)->first();

        if(!empty($rewardPoint) && $restDetails['reward_option'] == 'Yes') {
            $restDetails['reward_option'] = 'Yes';
            $restDetails['reward_text'] = 'Earn '.$rewardPoint['reward_totalpoint'].' point & Get '.
                $rewardPoint['reward_percentage'].'% off.';
        } else {
            $restDetails['reward_option'] = 'No';
            $restDetails['reward_text'] = '';
        }

        $customerHistory = $this->Orders->find('all', [
            'conditions' => [
                'customer_id' => $this->request->getData('customer_id')
            ]
        ])->count();

        if($customerHistory == 0) {
            $restDetails['first_user'] = 'Yes';
        }else {
            $restDetails['first_user'] = 'No';
        }
        //echo "<pre>"; print_r($restDetails); die;
       
       //------------Get Cuisines List-------------------

        $allCuisinesList = [];
        $allCuisinesLists = [];

        if(!empty($restDetails)) {
           
           if(!empty($restDetails['restaurant_cuisine'])){
                $restaurantCuisine = explode(',',$restDetails['restaurant_cuisine']);
            }

            $cuisineList = '';

            if(!empty($restaurantCuisine)) {
                foreach ($restaurantCuisine as $ckey => $cvalue) {
                    $cuisines = $this->Cuisines->find('all', [
                        'conditions' => [
                            'id' => $cvalue,
                            'delete_status' => 'N'
                        ]
                    ])->hydrate(false)->first();

                    if(!empty($cuisines)) {
                        $cuisineList[] = $cuisines['cuisine_name'];
                        if(!in_array($cvalue,$allCuisinesList)) {

                            $allCuisinesList[] = $cvalue;
                            if(empty($sideCuisines[$cuisines['cuisine_name']])) {
                                $sideCuisines[$cuisines['cuisine_name']] = 1;
                            }else {
                                $sideCuisines[$cuisines['cuisine_name']]++;
                            }


                            //echo $cuisines['cuisine_name'];die();
                            $allCuisinesLists[$cvalue]['id'] = $cuisines['id'];
                            $allCuisinesLists[$cvalue]['name'] = $cuisines['cuisine_name'];

                        }else {
                            if(empty($sideCuisines[$cuisines['cuisine_name']])) {
                                $sideCuisines[$cuisines['cuisine_name']] = 1;
                            }else {
                                $sideCuisines[$cuisines['cuisine_name']]++;
                            }
                        }
                    }
                }
                $restDetails['cuisineLists'] = implode(', ',$cuisineList);
                $restDetails['cuisineRecord'] = implode(', ',$cuisineList);
            }
           
            //-----------Timings start--------------------
            $array_of_time = array ();

            $nowTime = date('h:i A');
            //echo $nowTime;die;
            //$nowTime = '11.35 AM';
            $currentStatus ='';
            $currentTime = strtotime($nowTime);

            $currentDate = date('Y-m-d');

            $currentDay = strtolower(date('l',strtotime($currentDate)));
            //$currentDay = 'monday';


            $firstStartTime = $restDetails[$currentDay.'_first_opentime'];
            $firstEndTime = $restDetails[$currentDay.'_first_closetime'];

            $secondStartTime = $restDetails[$currentDay.'_second_opentime'];
            $secondEndTime = $restDetails[$currentDay.'_second_closetime'];


            $firstOpenTime = strtotime($restDetails[$currentDay.'_first_opentime']);
            $firstCloseTime = strtotime($restDetails[$currentDay.'_first_closetime']);

            $secondOpenTime = strtotime($restDetails[$currentDay.'_second_opentime']);
            $secondCloseTime = strtotime($restDetails[$currentDay.'_second_closetime']);

            $restDetails['currentStatus'] = '';
            //In first Timing section
            if($restDetails[$currentDay.'_status'] != 'Close') {

                if($currentTime < $firstOpenTime) {
                    $restDetails['currentStatus'] = 'PreOrder';
                    $final[] = $restDetails;
                    $nowTime = date("h:i A", strtotime('+45 minutes', $firstOpenTime));
                    $start_time = strtotime($currentDate . ' ' . $nowTime);
                    $end_time = strtotime($currentDate . ' ' . $firstEndTime);
                    $fifteen_mins = 15 * 60;

                    while ($start_time <= $end_time) {
                        $array_of_time[] = date("D h:i A", $start_time);
                        $start_time += $fifteen_mins;
                    }
                }


                if($currentTime > $firstOpenTime && $currentTime <= $firstCloseTime) {

                    if($restDetails['currentStatus'] == '') {
                        $restDetails['currentStatus'] = 'Open';
                    }

                    $nowTime = date("h:i A", strtotime('+45 minutes', $currentTime));
                    $start_time = strtotime($currentDate . ' ' . $nowTime);
                    $end_time = strtotime($currentDate . ' ' . $firstEndTime);
                    $fifteen_mins = 15 * 60;

                    while ($start_time <= $end_time) {
                        $array_of_time[] = date("D h:i A", $start_time);
                        $start_time += $fifteen_mins;
                    }

                    $secondStartTime = date("h:i A", strtotime('+45 minutes', $secondOpenTime));
                    $start_time1 = strtotime($currentDate . ' ' . $secondStartTime);
                    $end_time1 = strtotime($currentDate . ' ' . $secondEndTime);
                    $fifteen_mins = 15 * 60;

                    while ($start_time1 <= $end_time1) {
                        $array_of_time[] = date("D h:i A", $start_time1);
                        $start_time1 += $fifteen_mins;
                    }
                }

                if (empty($array_of_time)) {

                    if($currentTime > $firstCloseTime && $currentTime < $secondOpenTime ) {
                        if($restDetails['currentStatus'] == '') {
                            $restDetails['currentStatus'] = 'PreOrder';
                        }

                        $secondStartTime = date("h:i A", strtotime('+45 minutes', $secondOpenTime));
                        $start_time = strtotime($currentDate . ' ' . $secondStartTime);
                        $end_time = strtotime($currentDate . ' ' . $secondEndTime);
                        $fifteen_mins = 15 * 60;

                        while ($start_time <= $end_time) {
                            $array_of_time[] = date("D h:i A", $start_time);
                            $start_time += $fifteen_mins;
                        }
                    }
                } else {
                    if ($currentTime < $secondOpenTime) {
                        if($restDetails['currentStatus'] == '') {
                            $restDetails['currentStatus'] = 'PreOrder';
                        }

                        //$secondStartTime = 45 * 60;
                        $secondStartTime = date("h:i A", strtotime('+45 minutes', $secondOpenTime));
                        $start_time = strtotime($currentDate . ' ' . $secondStartTime);
                        $end_time = strtotime($currentDate . ' ' . $secondEndTime);
                        $fifteen_mins = 15 * 60;

                        while ($start_time <= $end_time) {
                            $array_of_time[] = date("D h:i A", $start_time);
                            $start_time += $fifteen_mins;
                        }
                    }
                }

                if ($currentTime > $secondOpenTime && $currentTime <= $secondCloseTime) {

                    if($restDetails['currentStatus'] == '') {
                        $restDetails['currentStatus'] = 'Open';
                    }
                    $final[] = $restDetails;
                    $nowTime = date("h:i A", strtotime('+45 minutes', $currentTime));
                    $start_time = strtotime($currentDate . ' ' . $nowTime);
                    $end_time = strtotime($currentDate . ' ' . $secondEndTime);
                    $fifteen_mins = 15 * 60;

                    while ($start_time <= $end_time) {
                        $array_of_time[] = date("D h:i A", $start_time);
                        $start_time += $fifteen_mins;
                    }
                }
                //pr($array_of_time);die;
            }
            $this->set(compact('array_of_time','currentDate'));
            //---------------------------------------Timings end----------------------------------------------
             
            //---------------------------Get Delivery Charge----------------------------------------------------
                $deliveryCharge = '';
                    $message = '';

                if($this->request->getData('address') != '') {

                    $prepAddr = str_replace(' ','+',$this->request->getData('address'));  
                    $url = "https://maps.google.com/maps/api/geocode/json?address=$prepAddr&key=AIzaSyAql4yBAyykHUGfXRicgL5_1YH9-ZeWk3s&sensor=false&region=India";
                    $ch = curl_init();
                    curl_setopt($ch, CURLOPT_URL, $url);
                    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
                    curl_setopt($ch, CURLOPT_PROXYPORT, 3128);
                    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);
                    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
                    $responses= curl_exec($ch);
                    curl_close($ch);
                    $response_a = json_decode($responses);
                    $sourcelatitude = $response_a->results[0]->geometry->location->lat;
                    $sourcelongitude = $response_a->results[0]->geometry->location->lng;

                    $latitudeTo = $restDetails['sourcelatitude'];
                    $longitudeTo = $restDetails['sourcelongitude'];
                    $unit = 'K';
                    $distance = $this->Common->getDistanceValue($sourcelatitude, $sourcelongitude, $latitudeTo, $longitudeTo,
                        $unit);
                    $distance = str_replace(',', '', $distance);
                    $restDetails['distance'] = $distance;
                    list($deliveryCharge, $message) = $this->getDeliveryCharge($restDetails['id'], $distance, $sourcelatitude, $sourcelongitude);

                }else {
                    $message = 'success';
                    $deliveryCharge = 0.00;
                    $restDetails['distance'] = '0.00';
                    if(empty($restDetails['minimum_order'])){
                        $minimumOrder = '0.00';
                        $restDetails['minimum_order'] = $minimumOrder;
                    }
                }
                if($message == 'success') {
                    $restDetails['delivery_charge'] = $deliveryCharge;
                } else {
                    $restDetails['delivery_charge'] = $deliveryCharge;
                }
            //------------------------------Get Category List-----------------------------
            foreach ($restDetails['restaurant_menus'] as $key => $value) {

                $category = $this->Categories->find('all', [
                    'fields' => [
                        'category_name',
                        'id',
                        'delete_status',
                        'status'
                    ],
                    'conditions' => [
                        'id' => $value['category_id'],
                        //'status' => '1',
                        //'delete_status' => 'N'
                    ]
                ])->hydrate(false)->first();

                $categoryList[$value['category_id']] = $category['category_name'];
                $menus[$value['category_id']]['category_name'] = $category['category_name'];
                $menus[$value['category_id']]['category_id'] = $category['id'];
                $menus[$value['category_id']]['status'] = $category['status'];
                $menus[$value['category_id']]['delete_status'] = $category['delete_status'];
                $menus[$value['category_id']]['menu'][] = $value;
            }         
            $categoryList = array_unique($categoryList);

         //---------------------------------Offers--------------------------------------
            
              $firstUser   = 'No';
              $normalOffer = 'No';
              $offerAmount = '0';
              $offerPercentage = '0';

              $checkOffers = $this->Offers->find('all', [
                'conditions' => [
                    'resid' => $this->request->getData('resId'),
                    'status' => '1',
                ],
                'order' => [
                    'id' => 'DESC'
                ]
            ])->hydrate(false)->toArray();
            

            if(!empty($checkOffers)) {

                foreach($checkOffers as $cKey => $cValue) {

                    $startDate = date('Y-m-d',strtotime($cValue['offer_from']));
                    $toDate    = date('Y-m-d',strtotime($cValue['offer_to']));
                   
                    if($currentDate >= strtotime($startDate) && $currentDate <= strtotime($toDate)) {

                        if($cValue['first_user'] == 'Y') {
                            $orderCount = $this->Orders->find('all', [
                                'conditions' => [
                                    'customer_id' => $this->request->getData('customer_id')
                                ]
                            ])->count();

                            if($orderCount == 0) {
                                if($subTotal >= $cValue['free_price']) {
                                    $firstUser = 'Yes';
                                    $offerAmount = $subTotal * $cValue['free_percentage']/100;
                                    $offerPercentage = $cValue['free_percentage'];

                                    $response['offerAmount'] = $offerAmount;
                                    $response['firstUser']  = $firstUser;
                                    $response['offerPercentage'] = $offerPercentage;
                                    $totalAmount = $totalAmount - $offerAmount;
                                }else {
                                    $response['offerAmount'] = $offerAmount;
                                    $response['firstUser'] = $firstUser;
                                    $response['offerPercentage'] = $offerPercentage;
                                }
                            }else if($cValue['normal'] == 'Y') {
                                if($subTotal >= $cValue['normal_price']) {
                                    $normalOffer = 'Yes';
                                    $offerAmount = $subTotal * $cValue['normal_percentage'] / 100;
                                    $offerPercentage = $cValue['normal_percentage'];
                                    $response['offerAmount'] = $offerAmount;
                                    $response['normalOffer'] = $normalOffer;
                                    $response['offerPercentage'] = $offerPercentage;
                                    $totalAmount = $totalAmount - $offerAmount;
                                    $withOutDelivery = $withOutDelivery - $offerAmount;
                                }else {
                                    $response['offerAmount'] = $offerAmount;
                                    $response['normalOffer'] = $normalOffer;
                                    $response['offerPercentage'] = $offerPercentage;
                                }
                            }else {
                                $response['offerAmount'] = $offerAmount;
                                $response['normalOffer'] = $normalOffer;
                                $response['offerPercentage'] = $offerPercentage;
                            }
                          break;
                        }else if($cValue['normal'] == 'Y') {
                            if($subTotal >= $cValue['normal_price']) {
                                $normalOffer = 'Yes';
                                $offerAmount = $subTotal * $cValue['normal_percentage'] / 100;
                                $offerPercentage = $cValue['normal_percentage'];
                                $response['offerAmount'] = $offerAmount;
                                $response['normalOffer'] = $normalOffer;
                                $response['offerPercentage'] = $offerPercentage;
                                $totalAmount = $totalAmount - $offerAmount;
                            }else {
                                $response['offerAmount'] = $offerAmount;
                                $response['normalOffer'] = $normalOffer;
                                $response['offerPercentage'] = $offerPercentage;
                            }
                           break;
                        }else {
                            $response['offerAmount'] = $offerAmount;
                            $response['normalOffer'] = $normalOffer;
                            $response['offerPercentage'] = $offerPercentage;
                        }
                    }else {
                        $response['offerAmount'] = $offerAmount;
                        $response['normalOffer'] = $normalOffer;
                        $response['offerPercentage'] = $offerPercentage;
                    }
                }

            }else {
                $response['offerAmount'] = $offerAmount;
                $response['normalOffer'] = $normalOffer;
                $response['offerPercentage'] = $offerPercentage;
            }
            
           //-----------------------------------------Offers--------------------------------------
            $offerCount = 0;
            $currentDate = strtotime(date('Y-m-d'));
       
            if(!empty($restDetails['offers'])) {
                foreach ($restDetails['offers'] as $oKey => $oValue) {
                    $startDate = date('Y-m-d',strtotime($oValue['offer_from']));
                    $toDate = date('Y-m-d',strtotime($oValue['offer_to']));

                    if($currentDate >= strtotime($startDate) && $currentDate <= strtotime($toDate)) {
                        $offerCount++;
                        $restDetails['restOffers'][] = $oValue;
                        break;
                    }else {
                        $restDetails['restOffers'] = [];
                    }
                }
            }else {
                $restDetails['restOffers'] = [];
            }
        //--------Reviews---------
            if(!empty($restDetails['reviews'])) {
                $reviewCount = 0;
                $restDetails['totalRating'] = count($restDetails['reviews']);
                foreach($restDetails['reviews'] as $rKey => $rValue) {
                    $reviewCount  = $rValue['rating'] + $reviewCount;
                }

                $restDetails['finalReview'] = ($reviewCount/$restDetails['totalRating']);
            }else {
                $restDetails['totalRating'] = 0;
                $restDetails['finalReview'] = 0;
            }

        //-----------Get Category List End--------------             
            if(empty($array_of_time)) {
                $restDetails['currentStatus'] = 'Closed';
            }
            if(!empty($menus)){
                $restDetails['menusDetails'] = array_values($menus);
            }else{
                $restDetails['menusDetails'] = [];
            }

            if(!empty($restDetails['logo_name'])){   
               /* $restDetails['restaurant_logo'] = DRIVERS_LOGO_URL.'/uploads/storeImages/'.$restDetails['id'].'/storeLogo/'.$restDetails['logo_name'];*/
                $restDetails['restaurant_logo'] = BASE_URL.'uploads/storeLogos/'.$restDetails['logo_name'];
            }else{
                $restDetails['restaurant_logo'] = '';
            }

            //echo "<pre>"; print_r($restDetails); die;

            if(!empty($restDetails)) {
                $response['restDetails'] = $restDetails;
                $response['categoryList'] = $categoryList;
                $response['success'] = 1;

            }else {
                $response['success'] = 0;
                $response['message'] = 'Error Occured';
            }
        }
        $this->apiResponse = $response;
    }
//-----------------------------------------------------------------------------------
    public function checkOut() {

        if($this->request->is(['post','put'])) {

            $postData = $this->request->getData();
            $page     = $this->request->getData('page');
            $action   = $this->request->getData('action');
            $customerId = $this->request->getData('customer_id');
            $storeId = $this->request->getData('store_id');

            $message = '';

            switch ($action) {

                case 'restaurantTiming':
                    if($this->request->getData('date') != '') {

                        $restaurantDetails = $this->Restaurants->find('all', [
                            'conditions' => [
                                'id' => $this->request->getData('resid')
                            ]
                        ])->hydrate(false)->first();

                        //pr($restaurantDetails);die;
                        //Timing Section
                        $array_of_time = array ();

                        $nowTime = date('h:i A');

                        //$nowTime = '12.35 PM';

                        $currentTime = strtotime($nowTime);
                        $currentDate = $this->request->getData('date');

                        $today = date('d-m-Y');

                        $currentDay = strtolower(date('l',strtotime($currentDate)));
                        //$currentDay = 'monday';

                        $firstStartTime = $restaurantDetails[$currentDay.'_first_opentime'];
                        $firstEndTime = $restaurantDetails[$currentDay.'_first_closetime'];

                        $secondStartTime = $restaurantDetails[$currentDay.'_second_opentime'];
                        $secondEndTime = $restaurantDetails[$currentDay.'_second_closetime'];


                        $firstOpenTime = strtotime($restaurantDetails[$currentDay.'_first_opentime']);
                        $firstCloseTime = strtotime($restaurantDetails[$currentDay.'_first_closetime']);

                        $secondOpenTime = strtotime($restaurantDetails[$currentDay.'_second_opentime']);
                        $secondCloseTime = strtotime($restaurantDetails[$currentDay.'_second_closetime']);


                        //In first Timing section
                        if($restaurantDetails[$currentDay.'_status'] != 'Close') {

                            $restaurantDetails['currentStatus'] = 'Open';
                            $final[] = $restaurantDetails;

                            if(strtotime($today) != strtotime($currentDate)) {

                                $nowTime = date("h:i A", strtotime('+45 minutes', $firstOpenTime));

                                $start_time = strtotime($currentDate . ' ' . $nowTime);
                                $end_time = strtotime($currentDate . ' ' . $firstEndTime);

                                $fifteen_mins = 15 * 60;

                                while ($start_time <= $end_time) {
                                    $array_of_time[] = date(" h:i A", $start_time);
                                    $start_time += $fifteen_mins;
                                }

                                $secondStartTime = date("h:i A", strtotime('+45 minutes', $secondOpenTime));
                                $start_time = strtotime($currentDate . ' ' . $secondStartTime);
                                $end_time = strtotime($currentDate . ' ' . $secondEndTime);

                                $fifteen_mins = 15 * 60;

                                while ($start_time <= $end_time) {
                                    $array_of_time[] = date(" h:i A", $start_time);
                                    $start_time += $fifteen_mins;
                                }

                            }else {

                                if($currentTime < $firstOpenTime) {

                                    $firstOpenTime = date("h:i A", strtotime('+45 minutes', $firstOpenTime));

                                    $start_time = strtotime($currentDate . ' ' . $firstOpenTime);
                                    $end_time = strtotime($currentDate . ' ' . $firstEndTime);

                                    $fifteen_mins = 15 * 60;

                                    while ($start_time <= $end_time) {
                                        $array_of_time[] = date(" h:i A", $start_time);
                                        $start_time += $fifteen_mins;
                                    }

                                    $secondStartTime = date("h:i A", strtotime('+45 minutes', $secondOpenTime));
                                    $start_time = strtotime($currentDate . ' ' . $secondStartTime);
                                    $end_time = strtotime($currentDate . ' ' . $secondEndTime);

                                    $fifteen_mins = 15 * 60;

                                    while ($start_time <= $end_time) {
                                        $array_of_time[] = date(" h:i A", $start_time);
                                        $start_time += $fifteen_mins;
                                    }

                                }

                                if($currentTime > $firstOpenTime && $currentTime <= $firstCloseTime) {


                                    $nowTime = date("h:i A", strtotime('+45 minutes', $currentTime));

                                    $start_time = strtotime($currentDate . ' ' . $nowTime);
                                    $end_time = strtotime($currentDate . ' ' . $firstEndTime);

                                    $fifteen_mins = 15 * 60;

                                    while ($start_time <= $end_time) {
                                        $array_of_time[] = date("h:i A", $start_time);
                                        $start_time += $fifteen_mins;
                                    }

                                    $secondStartTime = date("h:i A", strtotime('+45 minutes', $secondOpenTime));
                                    $start_time1 = strtotime($currentDate . ' ' . $secondStartTime);
                                    $end_time1 = strtotime($currentDate . ' ' . $secondEndTime);

                                    $fifteen_mins = 15 * 60;

                                    while ($start_time1 <= $end_time1) {
                                        $array_of_time[] = date("h:i A", $start_time1);
                                        $start_time1 += $fifteen_mins;
                                    }

                                }

                                if(empty($array_of_time)) {

                                    if($currentTime > $firstCloseTime && $currentTime < $secondOpenTime ) {

                                        $secondStartTime = date("h:i A", strtotime('+45 minutes', $secondOpenTime));
                                        $start_time = strtotime($currentDate . ' ' . $secondStartTime);
                                        $end_time = strtotime($currentDate . ' ' . $secondEndTime);

                                        $fifteen_mins = 15 * 60;

                                        while ($start_time <= $end_time) {
                                            $array_of_time[] = date("h:i A", $start_time);
                                            $start_time += $fifteen_mins;
                                        }

                                    }
                                }

                                if($currentTime > $secondOpenTime && $currentTime <= $secondCloseTime) {


                                    $currentTime = date("h:i A", strtotime('+45 minutes', $currentTime));
                                    $start_time = strtotime($currentDate . ' ' . $currentTime);
                                    $end_time = strtotime($currentDate . ' ' . $secondEndTime);

                                    $fifteen_mins = 15 * 60;

                                    while ($start_time <= $end_time) {
                                        $array_of_time[] = date("h:i A", $start_time);
                                        $start_time += $fifteen_mins;
                                    }
                                }
                            }
                        }
                        $timeList = '';
                        if(!empty($array_of_time)) {
                            foreach ($array_of_time as $key => $value) {
                                $timeList .= $value.',';
                            }
                            $response['success'] = 1;
                            $response['timeList'] = $timeList;
                        }else {
                            $response['success'] = 0;
                            $response['message'] = 'Closed';

                        }
                    }
                    break;

                case "addressBookList":

                    $customerId = $this->request->getData('customer_id');

                    /*$addressBook = $this->AddressBooks->find('all',[
                        'conditions' =>[
                            'AddressBooks.status' =>1,
                            'AddressBooks.delete_status' =>'N',
                            'AddressBooks.user_id' => $customerId
                        ]
                    ])->hydrate(false)->toArray();*/

                    $restaurantDetails = $this->Restaurants->find('all',[
                        'conditions' => [
                            'id' => $this->request->getData('resid')
                        ]
                    ])->hydrate(false)->first();

                    $addressBooks = $this->AddressBooks->find('all', [
                        'conditions' => [
                            'user_id' => $customerId,
                            'AddressBooks.delete_status' => 'N',
                            'AddressBooks.status' => '1'
                        ],
                        'order' => [
                            'AddressBooks.id' => 'DESC'
                        ],
                        //'limit' => '2'
                    ])->hydrate(false)->toArray();

                    //pr($addressBooks);die();
                    $addressBookLists = '';
                    $outOfDelivery = [];
                    if(!empty($addressBooks)) {
                        foreach($addressBooks as $key => $value) {

                            $sourcelatitude = $value['latitude'];
                            $sourcelongitude = $value['longitude'];

                            if($sourcelatitude != '' && $sourcelongitude != '') {

                                $final = array();
                                $distance = array();
                                $result = array();

                                $latitudeTo  = $restaurantDetails['sourcelatitude'];
                                $longitudeTo = $restaurantDetails['sourcelongitude'];
                                $unit='K';
                                $distance = $this->Common->getDistanceValue($sourcelatitude,$sourcelongitude,$latitudeTo,$longitudeTo,
                                    $unit);

                                $distance = str_replace(',','',$distance);
                                list($deliveryCharge,$message) = $this->getDeliveryCharge($restaurantDetails['id'],$distance,$sourcelatitude,$sourcelongitude);

                                if ($message == 'success') {
                                    $value['to_distance'] = $distance;
                                    if($restaurantDetails['free_delivery'] > 0 && $restaurantDetails['free_delivery'] <= $this->request->getData('subTotal') ) {
                                        $deliveryCharge = 0.00;
                                    }
                                    $value['deliveryCharge'] = number_format($deliveryCharge,2);
                                    $addressBookLists[] = $value;
                                }else {
                                    $value['to_distance'] = $distance;
                                    $outOfDelivery[] = $value;
                                }
                            }else {
                                $outOfDelivery[] = $value;
                            }
                        }
                    }

                    if(!empty($addressBookLists)) {
                        $addressBookLists = Hash::sort($addressBookLists, '{n}.to_distance', 'asc');

                    }

                    if(!empty($addressBookLists)) {
                        $response['success'] = 1;
                        $response['addressList'] = $addressBookLists;
                        $response['outOfDelivery'] = $outOfDelivery;

                    }elseif(!empty($outOfDelivery)) {
                        $response['success'] = 1;
                        $response['outOfDelivery'] = $outOfDelivery;
                        $response['addressList'] = [];
                    }else {
                        $response['success'] = 0;
                        $response['message'] = 'No address';
                    }

                    break;

                case "VoucherAdded":

                    //---------------------------
                    $this->loadModel('Vouchers');

                    $postData = $this->request->getData();

                    $voucherCode = $postData['voucherCode'];
                    $customerId  = $postData['customer_id'];

                    $currentDate  = strtotime(date("Y-m-d"));



                    $voucherDetails = $this->Vouchers->find('all', [
                        'conditions' => [
                            //'Vouchers.resid' => $storeId,
                            'Vouchers.status'   => 1,
                            'Vouchers.voucher_code' => $voucherCode

                        ]
                    ])->hydrate(false)->first();
                    //pr($voucherDetails);die();

                    if (!empty($voucherDetails)) {
                        $startDate = date('Y-m-d',strtotime($voucherDetails['voucher_from']));
                        $toDate = date('Y-m-d',strtotime($voucherDetails['voucher_to']));

                        if($currentDate >= strtotime($startDate) && $currentDate <= strtotime($toDate)) {

                            if ($voucherDetails['type_offer'] == 'single') {

                                $checkCoupon = $this->Orders->find('all', [
                                    'conditions' => [
                                        'customer_id' => $customerId,
                                        'voucher_code' => $voucherCode
                                    ]
                                ])->count();

                                if ($checkCoupon != 0) {
                                    $response['success'] = 0;
                                    $response['message'] = 'Voucher already used.';
                                } else {
                                    $response['success'] = 1;
                                    $response['voucherDetails'] = $voucherDetails;
                                }
                            } else {
                                $response['success'] = 1;
                                $response['voucherDetails'] = $voucherDetails;
                            }
                        }else {
                            $response['success']     = 0;
                            $response['message']     = 'Voucher code is not valid.';
                        }

                    } else {
                        $response['success']     = 0;
                        $response['message']     = 'Voucher code is not valid.';
                    }
                    break;
            }
            $this->apiResponse = $response;
        }
    }
//------------------------------------------------------------------------------------
    public function getDeliveryCharge($resId,$Durations,$lat,$lng) {

        $message= '';

        $restDetails = $this->Restaurants->find('all', [
            'fields' => [
                'id',
                'map_mode'
            ],
            'conditions' => [
                'id' => $resId
            ],
            'contain' => [
                'DeliverySettings' => [
                    'sort' => [
                        'DeliverySettings.delivery_miles' => 'ASC'
                    ]
                ],
                'Areamaps'
            ]
        ])->hydrate(false)->first();


        $deliveryCharge = $count = 0;
        if($restDetails['map_mode'] == 'Circle') {
            foreach ($restDetails['delivery_settings'] as $key => $value) {

                if($Durations <= $value['delivery_miles']) {
                    $deliveryCharge = $value['delivery_charge'];
                    $count        = '1';
                    break;
                }
            }
            if($count == 1){
                $message        = 'success';
            } else {
                $message = 'failed';
            }
        } elseif($restDetails['map_mode'] == 'Polygon') {
            foreach ($restDetails['areamaps'] as $key => $value) {

                $xyArray = $this->getXYAxis($value['mappath']);

                if (!empty($xyArray) && is_array($xyArray)) {
                    $objPolygon = new PolygonsController(array('x'=>$lat, 'y'=>$lng), $xyArray);

                    if ($objPolygon->check()) {
                        $deliveryCharge = $value['service_delivery_charge'];
                        $message        = 'success';
                        break;
                    }
                    else {
                        $message = 'failed';
                    }
                }
            }
        } else {
            $message = 'failed';
        }

        return array($deliveryCharge,$message);
    }
//------------------------------------------------------------------------------------
    //Get XYAxis for location
    public function getXYAxis($mapPath) {
        $xy = explode(',',$mapPath);
        $xyArray = array();

        if (!empty($xy) && is_array($xy)) {
            foreach ($xy as $x=>$y) {

                $xyAxis = explode(' ',trim($y));
                $xyArray[] = array('y'=>$xyAxis[0], 'x'=>$xyAxis[1]);

            }
        }
        return $xyArray;
    }
//-----------------------------------------------------------------------------------
    public function getLocation() {

        $latitude = $this->request->getData('latitude');
        $longitude = $this->request->getData('longitude');

        $url = "https://maps.googleapis.com/maps/api/geocode/json?latlng=".$latitude.','.$longitude."&key=AIzaSyA_PDTRdxnfHvK3V6-pApjZQgY8F8E5zOM&sensor=false";
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $url);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_PROXYPORT, 3128);
        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
        $output = curl_exec($ch);
        curl_close($ch);
        $response_a = json_decode($output,true);

        if($response_a['status'] == 'OK') {
            $response['success'] = 1;
            $response['address'] = $response_a['results']['0']['formatted_address'];

        }else {
            $response['success'] = 0;
            $response['message'] = "Can't get current location";

        }

        $this->apiResponse = $response;
    }
//-----------------------------------------------------------------------------------
    public function productDetails()
    {
        //-----------------------------------------
        $this->loadModel('RestaurantMenus');
        $this->loadModel('MenuAddons');
        //-------------------------------------------

        if($this->request->is(['post','put'])) {

            $postData = $this->request->getData();


            $mainAddon = array();
            $menuId = $postData['productId'];

            $menuDetails = $this->RestaurantMenus->find('all', [
                'conditions' => [
                    'RestaurantMenus.id' => $menuId
                ],
                'contain' => [
                    'MenuDetails'
                ]
            ])->hydrate(false)->first();
 
         //echo "<pre>"; print_r($menuDetails);

            /*$dealDetails = $this->Deal->find('first', array(
                'conditions' => array('Deal.main_product' => $menuId)));

            if (!empty($dealDetails)) {
                $menuDetails['Product']['product_name'] = $dealDetails['MainProduct']['product_name'] . ' + ' . $dealDetails['SubProduct']['product_name'];
            }*/


            $productDetail['Details'] = $menuDetails;
            $productDetail['variants'] = $menuDetails['menu_details'];

            $catId = $menuDetails['category_id'];
            $resId = $menuDetails['restaurant_id'];

            $addons = $this->MenuAddons->find('all', [
                'conditions' => [
                    'MenuAddons.category_id' => $catId,
                    'MenuAddons.restaurant_id' => $resId,
                    'MenuAddons.menu_id' => $menuId,
                ],
                'contain' => [
                    'Mainaddons'
                ],
                'group' => [
                    'MenuAddons.mainaddons_id'
                ]
            ])->hydrate(false)->toArray();

            $mainAddon = [];
            foreach ($addons as $key => $value) {
                if($value['mainaddon']['status'] == 1) {
                    $mainAddons = [];
                    $mainAddons['mainaddons_id'] = $value['mainaddon']['id'];
                    $mainAddons['mainaddons_name'] = $value['mainaddon']['mainaddons_name'];
                    $mainAddons['mainaddons_mini_count'] = $value['mainaddon']['mainaddons_mini_count'];
                    $mainAddons['mainaddons_count'] = $value['mainaddon']['mainaddons_count'];
                    $mainAddon[] = $mainAddons;
                }
            }

            $productDetail['MainAddon'] = $mainAddon;

            if (!empty($productDetail)) {
                $response['success'] = 1;
                $response['productDetails'] = $productDetail;
            } else {
                $response['success'] = 0;
                $response['message'] = 'No records found';
            }
        }
        $this->apiResponse = $response;
    }
    //-----------------------------------------
    public function productSubAddon()
    {

        //-----------------------------------------
        $this->loadModel('RestaurantMenus');
        $this->loadModel('MenuAddons');
        //-------------------------------------------

        if($this->request->is(['post','put'])) {

            $postData = $this->request->getData();

            $productAddons = [];

            $productId = $postData['productId'];
            $mainAddonId = $postData['mainAddonId'];
            $productDetailId = $postData['productDetailId'];

            $addons = $this->MenuAddons->find('all', array(
                'conditions' => [
                    //'MenuAddons.restaurant_id' => $productId,
                    'MenuAddons.menu_id' => $productId,
                    'MenuAddons.menudetails_id' => $productDetailId,
                    'MenuAddons.mainaddons_id' => $mainAddonId
                ],
                'contain' => [
                    'Subaddons',
                ]
            ))->hydrate(false)->toArray();

            //pr($addons);die();

            foreach ($addons as $key => $value) {
                $productAddons[$key]['id'] = $value['subaddon']['id'];
                $productAddons[$key]['subaddons_name'] = $value['subaddon']['subaddons_name'];
                $productAddons[$key]['subaddons_price'] = $value['subaddons_price'];
            }

            if (!empty($productAddons)) {
                $response['success'] = 1;
                $response['productAddons'] = $productAddons;
            } else {
                $response['success'] = 0;
                $response['message'] = 'No addons found';
            }
        }
        $this->apiResponse = $response;
    }
//-------------------------------------------------------------------------------------
    public function placeOrder() {

        $siteSettings = $this->Sitesettings->find('all', [
            'conditions' => [
                'id' => '1'
            ]
        ])->hydrate(false)->first();

        define('PUSHER_APPID',$siteSettings['pusher_id']);
        define('PUSHER_SECRET',$siteSettings['pusher_secret']);
        define('PUSHER_AUTHKEY',$siteSettings['pusher_key']);


        //echo "<pre>";print_r($this->request->getData());die();

        $customerDetails = $this->Users->find('all', [
            'conditions' => [
                'id' => $this->request->getData('customer_id')
            ]
        ])->hydrate(false)->first();


        $restaurantDetails = $this->Restaurants->find('all', [
            'conditions' => [
                'id' => $this->request->getData('resid')
            ]
        ])->hydrate(false)->first();

        if($this->request->getData('order_type') == 'delivery') {
            $addressDetails = $this->AddressBooks->find('all', [
                'conditions' => [
                    'id' => $this->request->getData('delivery_id')
                ]
            ])->hydrate(false)->first();


            $orderUpdate['destination_latitude'] = $addressDetails['latitude'];
            $orderUpdate['destination_longitude'] = $addressDetails['longitude'];
            $orderUpdate['flat_no'] = $addressDetails['flat_no'];
            $orderUpdate['address'] = $addressDetails['address'];

            $orderUpdate['delivery_charge'] = $this->request->getData('delivery_charge');


        }

        $orderEntity = $this->Orders->newEntity();

        $orderUpdate['customer_id'] = $this->request->getData('customer_id');
        $orderUpdate['restaurant_id'] = $this->request->getData('resid');
        $orderUpdate['customer_name'] = $customerDetails['first_name'];
        $orderUpdate['customer_email'] = $customerDetails['username'];
        $orderUpdate['customer_phone'] = $customerDetails['phone_number'];
        $orderUpdate['source_latitude'] = $restaurantDetails['sourcelatitude'];
        $orderUpdate['source_longitude'] = $restaurantDetails['sourcelongitude'];


        $orderUpdate['assoonas'] = ($this->request->getData('assoonas') == 'Now') ? 'now' : '';
        $orderUpdate['order_description'] = $this->request->getData('order_description');

        $orderUpdate['tax_percentage'] = $restaurantDetails['restaurant_tax'];
        $orderUpdate['tax_amount'] = $this->request->getData('tax_amount');
        $orderUpdate['order_type'] = $this->request->getData('order_type');



        $orderUpdate['voucher_code'] = $this->request->getData('voucher_code');
        $orderUpdate['order_sub_total'] = $this->request->getData('order_sub_total');
        $orderUpdate['order_grand_total'] = $this->request->getData('ordertotalprice');
        $orderUpdate['payment_method'] = $this->request->getData('payment_method');

        //Voucher Section
        $orderUpdate['voucher_code'] = $this->request->getData('voucher_code');
        $orderUpdate['voucher_amount'] = $this->request->getData('voucher_amount');
        $orderUpdate['voucher_percentage'] = $this->request->getData('voucher_percentage');

        $orderUpdate['offer_percentage'] = $this->request->getData('offer_percentage');
        $orderUpdate['offer_amount'] = $this->request->getData('offer_amount');

        //Redeem Section
        $redeemPercentage = $this->request->getData('rewardPercentage');
        $redeemAmount = $this->request->getData('rewardPoint');

        if($redeemAmount != '' && $redeemPercentage != '') {
            $orderUpdate['reward_used'] = 'Y';
            $orderUpdate['reward_offer'] = $redeemAmount;
            $orderUpdate['reward_offer_percentage'] = $redeemPercentage;
        }


        if($this->request->getData('assoonas') != 'Now') {
            $orderUpdate['delivery_date'] = date('Y-m-d',strtotime($this->request->getData('delivery_date')));
            $orderUpdate['delivery_time'] = $this->request->getData('delivery_time');
        }else {
            $orderUpdate['delivery_date'] = date('Y-m-d');
            $orderUpdate['delivery_time'] = date('h:i A');
        }



        if($this->request->getData('order_type') == 'delivery') {

            $sourcelatitude = $addressDetails['latitude'];
            $sourcelongitude = $addressDetails['longitude'];


            if($sourcelatitude != '' && $sourcelongitude != '') {

                $final = array();
                $distance = array();
                $result = array();

                $latitudeTo  = $restaurantDetails['sourcelatitude'];
                $longitudeTo = $restaurantDetails['sourcelongitude'];
                $unit='K';
                $distance = $this->Common->getDistanceValue($sourcelatitude,$sourcelongitude,$latitudeTo,$longitudeTo,
                    $unit);

                $distance = str_replace(',','',$distance);
                list($deliveryCharge,$message) = $this->getDeliveryCharge($restaurantDetails['id'],$distance,$sourcelatitude,$sourcelongitude);

                if ($message == 'success') {
                    $to_distance = $distance;
                    $deliveryCharge = number_format($deliveryCharge,2);
                }else {
                    $to_distance = $distance;
                }
            }

        }else {
            $address = '';
        }


        $orderPatch = $this->Orders->patchEntity($orderEntity,$orderUpdate);

        $cartDetails = json_decode($this->request->getData('cartdetails'),true);

        //pr($cartDetails);die();

        $orderSave = $this->Orders->save($orderPatch);
        if($orderSave) {

            $ordergenid = $this->Common->generateId($orderSave->id);
            $finalorderid = "ORD00".$ordergenid;

            //$finalRecord = str_replace('n','',$this->request->getData('cartdetails'));
            //$jsonData    = stripslashes(html_entity_decode($finalRecord));

            //$cartDetails = json_decode($jsonData,true);


            //pr($cartDetails);die();

            foreach ($cartDetails as $key => $value) {

                $shoppingCart['id'] = '';
                $shoppingCart['restaurant_id']       = $this->request->getData('resid');
                $shoppingCart['order_id']            = $orderSave->id;
                $shoppingCart['menu_id']             = $value['menu_id'];
                $shoppingCart['menu_name']           = $value['menu_name'];
                $shoppingCart['menu_price']          = $value['Total']/$value['quantity'];
                $shoppingCart['quantity']            = $value['quantity'];
                $shoppingCart['subaddons_name']      = $value['Addon_name'];

                $shoppingCart['total_price'] = $value['Total'];
                $shoppingCart['menu_description'] = $value['instruction'];

                $cartEntity = $this->Carts->newEntity();
                $cartPatch = $this->Carts->patchEntity($cartEntity,$shoppingCart);
                $cartSave = $this->Carts->save($cartPatch);
            }


            if($this->request->getData('payment_method') == 'cod' || $this->request->getData('paidFull') == 'Yes') {


                if($this->request->getData('payment_name') == 'Yes' || $this->request->getData('payment_name') == 'yes') {

                    $walletAmount = $customerDetails['wallet_amount'] - $this->request->getData('ordertotalprice');



                    if($walletAmount < 0) {
                        $history['amount'] = $customerDetails['wallet_amount'];
                        $orderUpdate['split_payment'] = 'Yes';
                        $orderUpdate['wallet_amount'] = $customerDetails['wallet_amount'];
                        $customerDetails['wallet_amount'] = 0;
                        $orderUpdate['payment_method']  =  'cod';
                    }else {
                        $customerDetails['wallet_amount'] = $walletAmount;
                        $orderUpdate['payment_status']  =  'P';
                        $orderUpdate['payment_method']  =  'Wallet';
                        $history['amount'] = $this->request->getData('ordertotalprice');
                    }



                    //Update Wallet Amount
                    $custEntity = $this->Users->newEntity();
                    $amount['wallet_amount'] = $customerDetails['wallet_amount'];
                    $custPatch = $this->Users->patchEntity($custEntity,$amount);
                    $custPatch->id = $customerDetails['id'];
                    $saveCust = $this->Users->save($custPatch);

                    //Add Wallet History
                    $walletEntity = $this->WalletHistories->newEntity();
                    $history['customer_id'] = $customerDetails['id'];
                    $history['purpose'] = "Amount Paid";
                    $history['transaction_type'] = 'Debited';

                    $history['transaction_details'] = $finalorderid;
                    $walletPatch = $this->WalletHistories->patchEntity($walletEntity,$history);
                    $saveWallet = $this->WalletHistories->save($walletPatch);

                }


                $orderUpdate['order_number']  =  $finalorderid;
                $orderUpdate['payment_wallet']  =  $this->request->getData('payment_name');
                $orderUpdate['paid_full']  =  $this->request->getData('paidFull');
                $orderUpdate['id']                =  $orderSave->id;

                $leadsupdt = $this->Orders->patchEntity($orderEntity,$orderUpdate);
                $leadssave = $this->Orders->save($leadsupdt);

            }else if($this->request->getData('payment_method') == 'stripe') {

                $siteSettings = $this->Sitesettings->find('all', [
                    'conditions' => [
                        'id' => '1'
                    ]
                ])->hydrate(false)->first();

                if($siteSettings['stripe_mode'] == 'Live') {
                    define('STRIPE_SECRET',$siteSettings['stripe_secretkey']);
                    define('STRIPE_PUBLISH',$siteSettings['stripe_publishkey']);
                }else {
                    define('STRIPE_SECRET',$siteSettings['stripe_secretkeyTest']);
                    define('STRIPE_PUBLISH',$siteSettings['stripe_publishkeyTest']);
                }

                require_once(ROOT . DS . 'vendor' . DS . 'stripe' . DS . 'init.php');
                \Stripe\Stripe::setApiKey(STRIPE_SECRET);

                $token  = $this->request->getData('res-sp-token');
                $payableAmount = $this->request->getData('ordertotalprice')*100;

                if($this->request->getData('payment_name') == 'Yes' || $this->request->getData('payment_name') == 'yes') {

                    $payableAmount = $this->request->getData('ordertotalprice') - $customerDetails['wallet_amount'];

                    $payableAmount = $payableAmount * 100;

                }


                if($this->request->getData('credit_card_choose') == '') {

                    // Create a Customer:
                    $customer = \Stripe\Customer::create(array(
                        "email" => $customerDetails['username'],
                        "source" => $token,
                    ));

                    // Charge the Customer instead of the card:
                    $charge = \Stripe\Charge::create(array(
                        "amount" => $payableAmount,
                        "currency" => "usd",
                        "customer" => $customer->id
                    ));
                    //echo "<pre>";print_r($charge);die();
                    //Save Stripe's Customer Details in Table
                    $cardEntity = $this->StripeCustomers->newEntity();
                    $cardInsert['customer_id'] = $this->request->getData('customer_id');
                    $cardInsert['customer_name'] = $customerDetails['first_name'];
                    $cardInsert['stripe_customer_id'] = $customer->id;
                    $cardInsert['stripe_token_id'] = $token;
                    $cardInsert['card_id'] = $charge['source']['id'];
                    $cardInsert['card_brand'] = $charge['source']['brand'];
                    $cardInsert['card_type'] = $charge['source']['funding'];
                    $cardInsert['card_number'] = $charge['source']['last4'];
                    $cardInsert['exp_month'] = $charge['source']['exp_month'];
                    $cardInsert['exp_year'] = $charge['source']['exp_year'];
                    $cardInsert['client_ip'] = $charge['source']['client_ip'];
                    $cardInsert['country'] = $charge['source']['country'];
                    $cardInsert['card_email'] = $charge['source']['name'];
                    $cardPatch = $this->StripeCustomers->patchEntity($cardEntity,$cardInsert);
                    $saveCard = $this->StripeCustomers->save($cardPatch);

                    $orderUpdate['stripe_customerid'] = $customer->id;


                }else {
                    $stripeDetails = $this->StripeCustomers->find('all', [
                        'conditions' => [
                            'id' => $this->request->getData('credit_card_choose')
                        ]
                    ])->hydrate(false)->first();
                    if(!empty($stripeDetails)) {

                        if($stripeDetails['stripe_customer_id'] == '') {
                            $customer = \Stripe\Customer::create(array(
                                "email" => $customerDetails['username'],
                                "source" => $stripeDetails['stripe_token_id'],
                            ));
                            $stripeDetails['stripe_customer_id'] = $customer->id;

                            $cardEntity = $this->StripeCustomers->newEntity();

                            $cardInsert['stripe_customer_id'] = $customer->id;
                            $cardPatch = $this->StripeCustomers->patchEntity($cardEntity,$cardInsert);
                            $cardPatch->id = $stripeDetails['id'];
                            $saveCard = $this->StripeCustomers->save($cardPatch);
                        }


                        // YOUR CODE: Save the customer ID and other info in a database for later.

                        // YOUR CODE (LATER): When it's time to charge the customer again, retrieve the customer ID.
                        $charge = \Stripe\Charge::create(array(
                            "amount" => $payableAmount, // $15.00 this time
                            "currency" => "usd",
                            "customer" => $stripeDetails['stripe_customer_id']
                        ));
                        $orderUpdate['stripe_customerid'] = $stripeDetails['stripe_customer_id'];
                    }
                }


                if($this->request->getData('payment_name') == 'Yes' || $this->request->getData('payment_name') == 'yes') {
                    $orderUpdate['split_payment'] = 'Yes';

                    $walletAmount = $customerDetails['wallet_amount'] - $this->request->getData('ordertotalprice');

                    $payableAmount = $this->request->getData('ordertotalprice') - $customerDetails['wallet_amount'];



                    if ($walletAmount < 0) {
                        $history['amount'] = $customerDetails['wallet_amount'];
                        $orderUpdate['split_payment'] = 'Yes';
                        $orderUpdate['wallet_amount'] = $customerDetails['wallet_amount'];
                        $customerDetails['wallet_amount'] = 0;

                    } else {
                        $customerDetails['wallet_amount'] = $walletAmount;
                        $orderUpdate['payment_status']  =  'P';
                        $history['amount'] = $this->request->getData('ordertotalprice');
                    }

                    //Update Wallet Amount
                    $custEntity = $this->Users->newEntity();
                    $amount['wallet_amount'] = $customerDetails['wallet_amount'];
                    $custPatch = $this->Users->patchEntity($custEntity,$amount);
                    $custPatch->id = $customerDetails['id'];
                    $saveCust = $this->Users->save($custPatch);

                    //$history['amount'] = $this->request->getData('ordertotalprice');



                    //Add Wallet History
                    $walletEntity = $this->WalletHistories->newEntity();
                    $history['customer_id'] = $customerDetails['id'];
                    $history['purpose'] = "Amount Paid";
                    $history['transaction_type'] = 'Debited';
                    $history['transaction_details'] = $finalorderid;
                    $walletPatch = $this->WalletHistories->patchEntity($walletEntity,$history);
                    $saveWallet = $this->WalletHistories->save($walletPatch);

                }

                $orderUpdate['order_number']  =  $finalorderid;

                $orderUpdate['payment_wallet']  =  $this->request->getData('payment_name');
                $orderUpdate['card_id']  =  $this->request->getData('credit_card_choose');
                $orderUpdate['payment_status']  =  'P';

                $orderUpdate['id']                =  $orderSave->id;
                $leadsupdt = $this->Orders->patchEntity($orderEntity,$orderUpdate);
                $leadssave = $this->Orders->save($leadsupdt);

            }else if($this->request->getData('payment_method') == 'paypal') {

                if(strtolower( $this->request->getData('payment_name')) == 'yes') {
                    $orderUpdate['split_payment'] = 'Yes';

                    $walletAmount = $customerDetails['wallet_amount'] - $this->request->getData('ordertotalprice');

                    $history['amount'] = $customerDetails['wallet_amount'];

                    /*if($walletAmount < 0) {
                        $customerDetails['wallet_amount'] = 0;
                    }else {
                        $customerDetails['wallet_amount'] = $walletAmount;
                        //$orderUpdate['payment_status']  =  'P';
                    }*/

                    if($walletAmount < 0) {
                        $orderUpdate['split_payment'] = 'Yes';
                        $orderUpdate['wallet_amount'] = $customerDetails['wallet_amount'];
                        $customerDetails['wallet_amount'] = 0;
                    }else {
                        $customerDetails['wallet_amount'] = $walletAmount;
                        $orderUpdate['payment_status']  =  'P';
                    }

                    //Update Wallet Amount
                    $custEntity = $this->Users->newEntity();
                    $amount['wallet_amount'] = $customerDetails['wallet_amount'] ;
                    $custPatch = $this->Users->patchEntity($custEntity,$amount);
                    $custPatch->id = $this->request->getData('customer_id');
                    $saveCust = $this->Users->save($custPatch);

                }

                $orderUpdate['order_number']  =  $finalorderid;
                $orderUpdate['paymentID']  =  $this->request->getData('transaction_id');
                $orderUpdate['payment_status']  =  'P';

                $orderUpdate['id']                =  $orderSave->id;
                $leadsupdt = $this->Orders->patchEntity($orderEntity,$orderUpdate);
                $leadssave = $this->Orders->save($leadsupdt);
            }

            if($_SERVER['HTTP_HOST'] != 'localhost') {

                $restaurantFCM = $this->Restaurants->find('all', [
                    'fields' => [
                        'device_id'
                    ],
                    'conditions' => [
                        'id' => $this->request->getData('resid')
                    ]
                ])->hydrate(false)->first();

                if($restaurantFCM['device_id'] != '') {

                    $message      = 'New order came - '.$finalorderid;

                    $notificationdata['data']['title']          = "Neworder";
                    $notificationdata['data']['message']        = $message;
                    $notificationdata['data']['is_background']  = false;
                    $notificationdata['data']['payload']        = array('OrderDetails' => "",'type'    => "ordercanceled");
                    $notificationdata['data']['timestamp']      = date('Y-m-d G:i:s');

                    $this->FcmNotification->sendNotification($notificationdata, $restaurantFCM['device_id']);

                }
            }
            $message = 'New Order Came';
            $this->PushNotification->pushNotification($message,$restaurantDetails['user_id']);

            //Reward Points Update

            if($redeemAmount > 0 && $redeemPercentage > 0) {

                $customerPoints = $this->CustomerPoints->find('all', [
                    'fields' => [
                        'total_points' => 'SUM(points)'
                    ],
                    'conditions' => [
                        'customer_id' => $this->request->getData('customer_id'),
                        'status' => '1'
                    ]
                ])->hydrate(false)->toArray();

                $customerPoint['order_id'] = $orderSave->id;
                $customerPoint['restaurant_name'] = $restaurantDetails['restaurant_name'];
                $customerPoint['customer_id'] = $this->request->getData('customer_id');
                $customerPoint['total'] = $orderUpdate['order_grand_total'];
                $customerPoint['points'] = $customerPoints[0]['total_points'];
                $customerPoint['type'] = 'Spent';

                $customerPointEntity = $this->CustomerPoints->newEntity();
                $customerPointPatch = $this->CustomerPoints->patchEntity($customerPointEntity,$customerPoint);
                $customerPointSave = $this->CustomerPoints->save($customerPointPatch);

                $rewardPoints = $this->CustomerPoints->find('all', [
                    'conditions' => [
                        'customer_id' => $this->request->getData('customer_id'),
                        'status' => '1'
                    ]
                ])->hydrate(false)->toArray();

                if(!empty($rewardPoints)) {

                    foreach ($rewardPoints as $key => $value) {
                        $reward['id'] = $value['id'];
                        $reward['status'] = '0';
                        $rewardPointEntity = $this->CustomerPoints->newEntity();
                        $rewardPointPatch = $this->CustomerPoints->patchEntity($rewardPointEntity,$reward);
                        $customerPointSave = $this->CustomerPoints->save($rewardPointPatch);
                    }

                }

            }



            $response['success']    = 1;
            $response['message']    = 'Your order placed successfully';
            $response['order_id']   = $orderSave->id;

        }else {
            $response['success']    = 0;
            $response['message']    = 'Error Occurd';
        }

        $this->apiResponse = $response;

    }
//-------------------------------------------------------------------------------------
    public function restaurantDetails() {

        if($this->request->getData('address') != ''){

            $siteSettings = $this->Sitesettings->find('all', [
                'conditions' => [
                    'id' => '1'
                ]
            ])->hydrate(false)->first();


            $prepAddr = str_replace(' ','+',$this->request->getData('address'));

            $url = "https://maps.google.com/maps/api/geocode/json?address=$prepAddr&key=AIzaSyCbF87_gxLI8KUpk3MVmHC9pDlqoYWyuNQ&sensor=false&region=India";
            $ch = curl_init();
            curl_setopt($ch, CURLOPT_URL, $url);
            curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
            curl_setopt($ch, CURLOPT_PROXYPORT, 3128);
            curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);
            curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
            $resp = curl_exec($ch);
            curl_close($ch);
            $response_a = json_decode($resp);


            $sourcelatitude = $response_a->results[0]->geometry->location->lat;
            $sourcelongitude = $response_a->results[0]->geometry->location->lng;

            if($sourcelatitude != '' && $sourcelongitude != '') {
                $restaurantList = $this->Restaurants->find('all', [
                    'conditions' => [
                        'id' => $this->request->getData('resid'),
                        'status' => '1',
                        'delete_status' => 'N'
                    ],
                    'contain' => [
                        'RestaurantMenus',
                        'Reviews' =>[
                            'conditions' => [
                                'status' => 1
                            ]
                        ],
                        'Offers' => [
                            'conditions' => [
                                'Offers.status' => 1
                            ],
                            'sort' => [
                                'Offers.id' => 'DESC'
                            ]
                        ],
                        'Promotions',
                        'RestaurantPayments.PaymentMethods'
                    ]
                ])->hydrate(false)->toArray();
            }
            //pr($restaurantList);die();

            if(!empty($restaurantList)) {

                $currentTime = strtotime(date('h:i A'));
                $currentDay = strtolower(date('l'));

                $final = [];
                $distance = [];
                $result = [];
                $allCuisinesList = [];
                $sideCuisines = [];
                $pickupCount = 0;
                $deliveryCount = 0;
                $offerCount = 0;

                foreach($restaurantList as $key => $value) {

                    if(!empty($value['restaurant_menus'])) {

                        $message = '';
                        $latitudeTo = $value['sourcelatitude'];
                        $longitudeTo = $value['sourcelongitude'];
                        $unit = 'K';
                        $distance = $this->Common->getDistanceValue($sourcelatitude, $sourcelongitude, $latitudeTo, $longitudeTo,
                            $unit);

                        $distance = str_replace(',', '', $distance);

                        list($deliveryCharge, $message) = $this->getDeliveryCharge($value['id'], $distance, $sourcelatitude, $sourcelongitude);
                        $value['to_distance'] = $distance;


                        if ($message == 'success') {


                            $restaurantCuisine = explode(',',$value['restaurant_cuisine']);
                            $cuisineList = '';

                            if(!empty($restaurantCuisine)) {
                                foreach ($restaurantCuisine as $ckey => $cvalue) {
                                    $cuisines = $this->Cuisines->find('all', [
                                        'conditions' => [
                                            'id' => $cvalue
                                        ]
                                    ])->hydrate(false)->first();
                                    if(!empty($cuisines)) {
                                        $cuisineList[] = $cuisines['cuisine_name'];
                                        if(!in_array($cvalue,$allCuisinesList)) {
                                            $allCuisinesList[] = $cvalue;
                                            if(empty($sideCuisines[$cuisines['cuisine_name']])) {
                                                $sideCuisines[$cuisines['cuisine_name']] = 1;
                                            }else {
                                                $sideCuisines[$cuisines['cuisine_name']]++;
                                            }

                                            $allCuisinesLists[$ckey]['id'] = $cuisines['id'];
                                            $allCuisinesLists[$ckey]['name'] = $cuisines['cuisine_name'];
                                        }else {
                                            if(empty($sideCuisines[$cuisines['cuisine_name']])) {
                                                $sideCuisines[$cuisines['cuisine_name']] = 1;
                                            }else {
                                                $sideCuisines[$cuisines['cuisine_name']]++;
                                            }
                                        }
                                    }
                                }
                            }
                            $value['cuisineLists'] = implode(',',$cuisineList);

                            //Set Delivery Charge AMount
                            $value['delivery_charge'] = $deliveryCharge;


                            $firstOpenTime = strtotime($value[$currentDay.'_first_opentime']);
                            $firstCloseTime = strtotime($value[$currentDay.'_first_closetime']);

                            $secondOpenTime = strtotime($value[$currentDay.'_second_opentime']);
                            $secondCloseTime = strtotime($value[$currentDay.'_second_closetime']);

                            //Get Pickup Count
                            if($value['restaurant_pickup'] == 'Yes') {
                                $pickupCount++;
                            }

                            if($value['restaurant_delivery'] == 'Yes') {
                                $deliveryCount++;
                            }


                            $currentDate = strtotime(date('Y-m-d'));
                            if(!empty($value['offers'])) {

                                foreach ($value['offers'] as $oKey => $oValue) {
                                    $startDate = date('Y-m-d',strtotime($oValue['offer_from']));
                                    $toDate = date('Y-m-d',strtotime($oValue['offer_to']));

                                    if($currentDate >= strtotime($startDate) && $currentDate <= strtotime($toDate)) {
                                        $offerCount++;
                                        $value['restOffers'] = $oValue;
                                        break;
                                    }else {
                                        $value['restOffers'] = [];
                                    }
                                }

                            }else {
                                $value['restOffers'] = [];
                            }

                            if(!empty($value['promotions'])) {

                                foreach ($value['promotions'] as $pKey => $pValue) {

                                    $value['promotions'][$pKey]['promo_image'] = $pValue['promo_image_url'];
                                    $value['promotions'][$pKey]['cuisineList'] = $value['cuisineLists'];
                                    $value['promotions'][$pKey]['to_distance'] = $value['to_distance'];
                                    $value['promotions'][$pKey]['delivery_charge'] = $value['delivery_charge'];
                                }

                            }


                            if(!empty($value['reviews'])) {
                                $reviewCount = 0;
                                $value['totalRating'] = count($value['reviews']);
                                foreach($value['reviews'] as $rKey => $rValue) {
                                    $reviewCount  = $rValue['rating'] + $reviewCount;
                                }

                                $value['finalReview'] = ($reviewCount/$value['totalRating']);
                            }else {
                                $value['totalRating'] = 0;
                                $value['finalReview'] = 0;
                            }

                            $customerHistory = $this->Orders->find('all', [
                                'conditions' => [
                                    'customer_id' => $this->request->getData('customer_id')
                                ]
                            ])->count();

                            if($customerHistory == 0) {
                                $value['first_user'] = 'Yes';
                            }else {
                                $value['first_user'] = 'No';
                            }

                            if($value[$currentDay.'_status'] != 'Close') {
                                if ($currentTime > $firstOpenTime && $currentTime <= $firstCloseTime) {
                                    $value['currentStatus'] = 'Open';
                                    $final[] = $value;
                                } else if ($currentTime > $secondOpenTime && $currentTime <= $secondCloseTime) {
                                    $value['currentStatus'] = 'Open';
                                    $final[] = $value;
                                } else if ($currentTime > $firstCloseTime && $currentTime <= $secondOpenTime) {
                                    $value['currentStatus'] = 'PreOrder';
                                    $final[] = $value;
                                } else {
                                    $value['currentStatus'] = 'Closed';
                                    $final[] = $value;
                                }
                            }else {
                                $value['currentStatus'] = 'Closed';
                                $final[] = $value;
                            }

                        }
                    }

                }

                if(!empty($final)) {
                    $result = Hash::sort($final, '{n}.to_distance', 'asc');
                }

                //echo "<pre>";print_r($result);die();

                //Get Banner Section:
                $bannerLists = $this->PromotionBanners->find('all', [
                    'conditions' => [
                        'banner_image !=' => ''
                    ]
                ])->hydrate(false)->toArray();

                $siteSettings = $this->Sitesettings->find('all', [
                    'conditions' => [
                        'id' => '1'
                    ]
                ])->hydrate(false)->first();


                if(!empty($result)) {
                    $response['restaurantLists'] = $result;
                    $response['currentDay'] = $currentDay;
                    $response['success'] = 1;
                }else {
                    $response['success'] = 0;
                    $response['message'] = 'There is no results';
                }
                $this->apiResponse = $response;
            }
        }
    }
//--------------------------------------------------------------------------------------
    public function bookaTable() {

        if($this->request->is(['post','put'])) {
            $postData = $this->request->getData();


            $bookings['customer_id'] = $postData['customer_id'];
            $bookings['guest_count'] = $postData['guest_count'];
            $bookings['booking_date'] = $postData['booking_date'];
            $bookings['booking_time'] = $postData['booking_time'];
            $bookings['customer_name'] = $postData['customer_name'];
            $bookings['booking_email'] = $postData['booking_email'];
            $bookings['booking_phone'] = $postData['booking_phone'];
            $bookings['restaurant_id'] = $postData['store_id'];
            $bookings['booking_instruction'] = $postData['booking_instruction'];

            $bookingEntity = $this->Bookings->newEntity($bookings);
            $result = $this->Bookings->save($bookingEntity);

            $bookings['booking_id'] = '#Book000'.$result->id;

            $bookingEntity = $this->Bookings->newEntity($bookings);
            $bookingEntity->id = $result->id;
            $this->Bookings->save($bookingEntity);

            $response['success'] = '1';
            $response['message'] = 'Successfully table booked';
        } else {
            $response['success'] = '0';
            $response['message'] = 'Failed for booking';
        }
        $this->apiResponse = $response;
    }
//-------------------------------------------------------------------------------------
    public function SocialLogin() {
        if($this->request->getData('username') != '') {

            $customerCount = $this->Users->find('all', [
                'conditions' => [
                    'username' => $this->request->getData('username'),
                    'role_id' => '3'
                ]
            ])->hydrate(false)->first();

            $remainingCount = $this->Users->find('all', [
                'conditions' => [
                    'username' => $this->request->getData('username'),
                    'role_id !=' => '3'
                ]
            ])->count();

            if($remainingCount == 0) {
                if(!empty($customerCount)) {
                    if($customerCount['status'] == '0') {
                        $response['success'] = '0';
                        $response['message'] = 'Account Deactive';
                    }else if($customerCount['deleted_status'] == 'Y') {
                        $response['success'] = '0';
                        $response['message'] = 'Account Deleted. Please contact admin';
                    }else {
                        $customerHistory = $this->Orders->find('all', [
                            'conditions' => [
                                'customer_id' => $customerCount['id']
                            ]
                        ])->count();

                        if($customerHistory == 0) {
                            $response['first_user'] = 'Yes';
                        }else {
                            $response['first_user'] = 'No';
                        }

                        //$this->Auth->setUser($customerCount);
                        $response['success']    = 1;
                        $response['message']    = 'login successfully';
                        $response['customerId'] = $customerCount['id'];
                        $response['name']       = $customerCount['first_name'].' '.$customerCount['last_name'];
                        $response['firstName']  = $customerCount['first_name'];
                        $response['lastName']   = $customerCount['last_name'];
                        $response['email']      = $customerCount['username'];
                        $response['customerPhone'] = $customerCount['phone_number'];

                    }

                }else {
                    $userEnty     = $this->Users->newEntity();
                    $userPatch    = $this->Users->patchEntity($userEnty, $this->request->getData());
                    $userPatch->role_id = 3 ;
                    $userPatch->status = 1;
                    $userPatch->password = '123123';

                    $save = $this->Users->save($userPatch);
                    if($save){
                        /*$this->Flash->success(_('Your Informations Added Successfully'));
                        $this->Auth->setUser($save);*/

                        $response['success']    = 1;
                        $response['message']    = 'login successfully';
                        $response['customerId'] = $save->id;
                        $response['name']       = $this->request->getData('first_name').' '.$this->request->getData('last_name');
                        $response['firstName']  = $this->request->getData('first_name');
                        $response['lastName']   = $this->request->getData('last_name');
                        $response['email']      = $this->request->getData('username');
                        $response['customerPhone'] = '';
                    }
                }
            }else {
                $response['success'] = '0';
                $response['message'] = 'Email Id Already exists';
            }

        }else {
            $response['success'] = '0';
            $response['message'] = 'Required Fields Missing';
        }

        $this->apiResponse = $response;
    }
//-------------------------------------------------------------------------------------
    public function siteSettings() {

        $siteSettings = $this->Sitesettings->find('all', [
            'conditions' => [
                'id' => '1'
            ]
        ])->hydrate(false)->first();

        $response['success'] = 1;
        $response['sitesettings'] = $siteSettings;

        $this->apiResponse = $response;

    }
//-------------------------------------------------------------------------------------
    public function ordersms($orderId) {

        $orderDetail = $this->Orders->find('all', [
            'conditions' => [
                'id' => $orderId
            ],
            'contain' => [
                'Restaurants'
            ]
        ])->hydrate(false)->first();


        $siteCountry = $this->Countries->find('all', [
            'conditions' => [
                'id' => $this->siteSettings['site_country']
            ]
        ])->hydrate(false)->first();

        $countryCode = $siteCountry['phone_code'];

        $customerMessage = 'Thanks for using '.$this->siteSetting['Sitesetting']['site_name'].' service. Your order '.$orderDetail['order_number'].' has been placed . Track your order at '.$this->siteUrl.'.  Regards '.$this->siteSettings['site_name'].'.';
        $toCustomerNumber = '+'.$countryCode.$this->Auth->User('Customer.customer_phone');
        if($this->siteSettings['sms_option'] == 'Yes'){
            $customerSms      = $this->Twilio->sendMessage($toCustomerNumber, $customerMessage);
        }

        if ($orderDetail['restaurant']['sms_option'] == 'Yes' && !empty($orderDetail['restaurant']['sms_phonenumber'])) {
            $restaurantMessage  = "Dear ".$orderDetail['restaurant']['restaurant_name']." you've received a ";
            //$storeMessage .= ($orderDetail['payment_method'] != 'paid') ? 'COD' : 'PAID';
            $restaurantMessage .= ' order '.$orderDetail['order_number'].' from '.$orderDetail['customer_name'];

            if ($orderDetail['order_type'] == 'Delivery') {
                $restaurantMessage .= ','.$orderDetail['flat_no'].','.$orderDetail['address'];

            }

            $restaurantMessage .= '. '.$orderDetail['order_type'].' due on '.$orderDetail['delivery_date'].' at '.$orderDetail['delivery_time'].'. Thanks '.$this->siteSettings['site_name'].'';
            $toStoreNumber = '+'.$countryCode.$orderDetail['sms_phonenumber'];
            if($this->siteSettings['sms_option'] == 'Yes'){
                $customerSms   = $this->Twilio->sendMessage($toStoreNumber, $restaurantMessage);
            }
        }
        return true;
    }
//--------------------------------------------------------------------------------------
    public function getRewards() {

        $subTotal = $this->request->getData('subTotal');
        $totalAmount = $this->request->getData('grandTotal');

        $rewardPoint = $this->Rewards->find('all', [
            'conditions' => [
                'id' => 1,
                'reward_option' => 'Yes'
            ]
        ])->hydrate(false)->first();

        $getRestaurantOption = $this->Restaurants->find('all', [
            'fields' => [
                'reward_option'
            ],
            'conditions' => [
                'id' => $this->request->getData('resid'),
            ]
        ])->hydrate(false)->first();

        if(!empty($rewardPoint) && $getRestaurantOption['reward_option'] == 'Yes') {
            $customerPoints = $this->CustomerPoints->find('all', [
                'conditions' => [
                    'customer_id' => $this->request->getData('customer_id'),
                    'status' => '1'
                ]
            ])->hydrate(false)->toArray();

            $createdDate = explode(' ',$rewardPoint['created']);

            $date1=date_create($createdDate[0]);
            $date2=date_create(date('Y-m-d'));
            $diff=date_diff($date1,$date2);
            $diff = $diff->format("%R%a");



            $remainingDays = ($rewardPoint['reward_validity'] - $diff);
            $resPercent = $rewardPoint['reward_percentage'];

            $previousCount = count($customerPoints)+1;

            if (($remainingDays > 0) && ( $previousCount >= $rewardPoint['redeem_order'])) {

                if($this->request->getData('customer_id') != '') {

                    $customerPoints = $this->CustomerPoints->find('all', [
                        'fields' => [
                            'total_points' => 'SUM(points)'
                        ],
                        'conditions' => [
                            'customer_id' => $this->request->getData('customer_id'),
                            'status' => '1'
                        ]
                    ])->hydrate(false)->toArray();

                    $userPoints = $customerPoints[0]['total_points'];
                    $resPoints  = $rewardPoint['reward_totalpoint'];

                    if($userPoints >= $resPoints) {
                        $totPercent = (abs($userPoints/$resPoints) * $resPercent);

                        $offPercent = $subTotal * abs($totPercent/100);
                        $this->request->session()->write('rewardPoint',$offPercent);
                        $this->request->session()->write('rewardPercentage',number_format($totPercent,2));
                        $totalAmount = $totalAmount - $offPercent;

                        $response['rewardPoint'] = $offPercent;
                        $totPercent = str_replace(',','',$totPercent);
                        $response['rewardPercentage'] = number_format($totPercent,2);


                    }else {
                        $response['rewardPoint'] = '';
                        $response['rewardPercentage'] = '';
                    }
                }else {
                    $response['rewardPoint'] = '';
                    $response['rewardPercentage'] = '';
                }


            }else {
                $response['rewardPoint'] = '';
                $response['rewardPercentage'] = '';
            }

            $grandTotal = $subTotal;
            $rewardAmount = $rewardPoint['reward_amount'];
            $rewardPoints = $rewardPoint['reward_point'];

            $getRewardFromTotal = $grandTotal/$rewardAmount;

            $orderPoint = $getRewardFromTotal * $rewardPoints;
            $response['earn_point'] = round($orderPoint);
            $response['rewardAmount'] = $rewardAmount;
            $response['rewardPoints'] = $rewardPoints;

        }else {
            $response['earn_point'] = '';
            $response['rewardPoint'] = '';
            $response['rewardPercentage'] = '';
            $response['rewardAmount'] = '';
            $response['rewardPoints'] = '';
        }

        $response['success'] = 1;

        $this->apiResponse = $response;
    }
//--------------------------------------------------------------------------------------
    public function rewardHistory() {

        $customerPoints = $this->CustomerPoints->find('all', [
            'conditions' => [
                'CustomerPoints.customer_id' => $this->request->getData('customer_id')
            ],
            'contain' => [
                'Orders' => [
                    'fields' => [
                        'Orders.order_number',
                        'Orders.reward_offer',
                    ]
                ]
            ],
            'order' => [
                'CustomerPoints.id' => 'DESC'
            ]
        ])->hydrate(false)->toArray();

        if(!empty($customerPoints)) {

            $customerTotalPoints = $this->CustomerPoints->find('all', [
                'fields' => [
                    'total_points' => 'SUM(points)'
                ],
                'conditions' => [
                    'customer_id' => $this->request->getData('customer_id'),
                    'status' => '1'
                ]
            ])->hydrate(false)->first();


            if($customerTotalPoints['total_points'] == '') {

                $customerTotalPoints['total_points'] = 0;
            }

            $rewardPoint = $this->Rewards->find('all', [
                'conditions' => [
                    'id' => 1,
                    'reward_option' => 'Yes'
                ]
            ])->hydrate(false)->first();

            $createdDate = explode(' ',$rewardPoint['created']);

            $date1=date_create($createdDate[0]);
            $date2=date_create(date('Y-m-d'));
            $diff=date_diff($date1,$date2);
            $diff = $diff->format("%R%a");

            $remainingDays = ($rewardPoint['reward_validity'] - $diff);

            if($remainingDays < 0) {
                $remainingDays = 0;
            }

            $response['totalPoints'] = $customerTotalPoints['total_points'];
            $response['customerPoints'] = $customerPoints;
            //$response['rewardPoint'] = $rewardPoint;
            $response['success'] = 1;

        }else {
            $response['success'] = 0;
            $response['message'] = 'No Record Found';
        }

        $this->apiResponse = $response;

    }
//---------------------------------------------------------------------------------------
}